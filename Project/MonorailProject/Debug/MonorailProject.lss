
AVRASM ver. 2.2.6  C:\cygwin\home\Ben\unsw\cs2121\comp2121-monorail-project\MonorailProject\MonorailProject\main.asm Tue Oct 31 17:33:13 2017

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.132\avrasm\inc\m2560def.inc'
C:\cygwin\home\Ben\unsw\cs2121\comp2121-monorail-project\MonorailProject\MonorailProject\main.asm(3): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.132\avrasm\inc\m2560def.inc'
C:\cygwin\home\Ben\unsw\cs2121\comp2121-monorail-project\MonorailProject\MonorailProject\main.asm(4): Including file 'C:\cygwin\home\Ben\unsw\cs2121\comp2121-monorail-project\MonorailProject\MonorailProject\init.asm'
C:\cygwin\home\Ben\unsw\cs2121\comp2121-monorail-project\MonorailProject\MonorailProject\main.asm(281): Including file 'C:\cygwin\home\Ben\unsw\cs2121\comp2121-monorail-project\MonorailProject\MonorailProject\led.asm'
C:\cygwin\home\Ben\unsw\cs2121\comp2121-monorail-project\MonorailProject\MonorailProject\main.asm(282): Including file 'C:\cygwin\home\Ben\unsw\cs2121\comp2121-monorail-project\MonorailProject\MonorailProject\buttons.asm'
C:\cygwin\home\Ben\unsw\cs2121\comp2121-monorail-project\MonorailProject\MonorailProject\main.asm(283): Including file 'C:\cygwin\home\Ben\unsw\cs2121\comp2121-monorail-project\MonorailProject\MonorailProject\lcd.asm'
C:\cygwin\home\Ben\unsw\cs2121\comp2121-monorail-project\MonorailProject\MonorailProject\main.asm(284): Including file 'C:\cygwin\home\Ben\unsw\cs2121\comp2121-monorail-project\MonorailProject\MonorailProject\delay.asm'
C:\cygwin\home\Ben\unsw\cs2121\comp2121-monorail-project\MonorailProject\MonorailProject\main.asm(285): Including file 'C:\cygwin\home\Ben\unsw\cs2121\comp2121-monorail-project\MonorailProject\MonorailProject\dcmotor.asm'
C:\cygwin\home\Ben\unsw\cs2121\comp2121-monorail-project\MonorailProject\MonorailProject\main.asm(286): Including file 'C:\cygwin\home\Ben\unsw\cs2121\comp2121-monorail-project\MonorailProject\MonorailProject\keypad.asm'
C:\cygwin\home\Ben\unsw\cs2121\comp2121-monorail-project\MonorailProject\MonorailProject\main.asm(287): Including file 'C:\cygwin\home\Ben\unsw\cs2121\comp2121-monorail-project\MonorailProject\MonorailProject\timer.asm'
C:\cygwin\home\Ben\unsw\cs2121\comp2121-monorail-project\MonorailProject\MonorailProject\main.asm(288): Including file 'C:\cygwin\home\Ben\unsw\cs2121\comp2121-monorail-project\MonorailProject\MonorailProject\sysconfig_test.asm'
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.132\avrasm\inc\m2560def.inc'
C:\cygwin\home\Ben\unsw\cs2121\comp2121-monorail-project\MonorailProject\MonorailProject\main.asm(3): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.132\avrasm\inc\m2560def.inc'
C:\cygwin\home\Ben\unsw\cs2121\comp2121-monorail-project\MonorailProject\MonorailProject\main.asm(4): Including file 'C:\cygwin\home\Ben\unsw\cs2121\comp2121-monorail-project\MonorailProject\MonorailProject\init.asm'
C:\cygwin\home\Ben\unsw\cs2121\comp2121-monorail-project\MonorailProject\MonorailProject\main.asm(281): Including file 'C:\cygwin\home\Ben\unsw\cs2121\comp2121-monorail-project\MonorailProject\MonorailProject\led.asm'
C:\cygwin\home\Ben\unsw\cs2121\comp2121-monorail-project\MonorailProject\MonorailProject\main.asm(282): Including file 'C:\cygwin\home\Ben\unsw\cs2121\comp2121-monorail-project\MonorailProject\MonorailProject\buttons.asm'
C:\cygwin\home\Ben\unsw\cs2121\comp2121-monorail-project\MonorailProject\MonorailProject\main.asm(283): Including file 'C:\cygwin\home\Ben\unsw\cs2121\comp2121-monorail-project\MonorailProject\MonorailProject\lcd.asm'
C:\cygwin\home\Ben\unsw\cs2121\comp2121-monorail-project\MonorailProject\MonorailProject\main.asm(284): Including file 'C:\cygwin\home\Ben\unsw\cs2121\comp2121-monorail-project\MonorailProject\MonorailProject\delay.asm'
C:\cygwin\home\Ben\unsw\cs2121\comp2121-monorail-project\MonorailProject\MonorailProject\main.asm(285): Including file 'C:\cygwin\home\Ben\unsw\cs2121\comp2121-monorail-project\MonorailProject\MonorailProject\dcmotor.asm'
C:\cygwin\home\Ben\unsw\cs2121\comp2121-monorail-project\MonorailProject\MonorailProject\main.asm(286): Including file 'C:\cygwin\home\Ben\unsw\cs2121\comp2121-monorail-project\MonorailProject\MonorailProject\keypad.asm'
C:\cygwin\home\Ben\unsw\cs2121\comp2121-monorail-project\MonorailProject\MonorailProject\main.asm(287): Including file 'C:\cygwin\home\Ben\unsw\cs2121\comp2121-monorail-project\MonorailProject\MonorailProject\timer.asm'
C:\cygwin\home\Ben\unsw\cs2121\comp2121-monorail-project\MonorailProject\MonorailProject\main.asm(288): Including file 'C:\cygwin\home\Ben\unsw\cs2121\comp2121-monorail-project\MonorailProject\MonorailProject\sysconfig_test.asm'
                                 
                                 ; MonorailProject.asm
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega2560.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m2560def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega2560
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega2560
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M2560DEF_INC_
                                 #define _M2560DEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega2560
                                 #pragma AVRPART ADMIN PART_NAME ATmega2560
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x98
                                 .equ	SIGNATURE_002	= 0x01
                                 
                                 #pragma AVRPART CORE CORE_VERSION V3
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	UDR3	= 0x136	; MEMORY MAPPED
                                 .equ	UBRR3L	= 0x134	; MEMORY MAPPED
                                 .equ	UBRR3H	= 0x135	; MEMORY MAPPED
                                 .equ	UCSR3C	= 0x132	; MEMORY MAPPED
                                 .equ	UCSR3B	= 0x131	; MEMORY MAPPED
                                 .equ	UCSR3A	= 0x130	; MEMORY MAPPED
                                 .equ	OCR5CL	= 0x12c	; MEMORY MAPPED
                                 .equ	OCR5CH	= 0x12d	; MEMORY MAPPED
                                 .equ	OCR5BL	= 0x12a	; MEMORY MAPPED
                                 .equ	OCR5BH	= 0x12b	; MEMORY MAPPED
                                 .equ	OCR5AL	= 0x128	; MEMORY MAPPED
                                 .equ	OCR5AH	= 0x129	; MEMORY MAPPED
                                 .equ	ICR5H	= 0x127	; MEMORY MAPPED
                                 .equ	ICR5L	= 0x126	; MEMORY MAPPED
                                 .equ	TCNT5L	= 0x124	; MEMORY MAPPED
                                 .equ	TCNT5H	= 0x125	; MEMORY MAPPED
                                 .equ	TCCR5C	= 0x122	; MEMORY MAPPED
                                 .equ	TCCR5B	= 0x121	; MEMORY MAPPED
                                 .equ	TCCR5A	= 0x120	; MEMORY MAPPED
                                 .equ	PORTL	= 0x10b	; MEMORY MAPPED
                                 .equ	DDRL	= 0x10a	; MEMORY MAPPED
                                 .equ	PINL	= 0x109	; MEMORY MAPPED
                                 .equ	PORTK	= 0x108	; MEMORY MAPPED
                                 .equ	DDRK	= 0x107	; MEMORY MAPPED
                                 .equ	PINK	= 0x106	; MEMORY MAPPED
                                 .equ	PORTJ	= 0x105	; MEMORY MAPPED
                                 .equ	DDRJ	= 0x104	; MEMORY MAPPED
                                 .equ	PINJ	= 0x103	; MEMORY MAPPED
                                 .equ	PORTH	= 0x102	; MEMORY MAPPED
                                 .equ	DDRH	= 0x101	; MEMORY MAPPED
                                 .equ	PINH	= 0x100	; MEMORY MAPPED
                                 .equ	UDR2	= 0xd6	; MEMORY MAPPED
                                 .equ	UBRR2L	= 0xd4	; MEMORY MAPPED
                                 .equ	UBRR2H	= 0xd5	; MEMORY MAPPED
                                 .equ	UCSR2C	= 0xd2	; MEMORY MAPPED
                                 .equ	UCSR2B	= 0xd1	; MEMORY MAPPED
                                 .equ	UCSR2A	= 0xd0	; MEMORY MAPPED
                                 .equ	UDR1	= 0xce	; MEMORY MAPPED
                                 .equ	UBRR1L	= 0xcc	; MEMORY MAPPED
                                 .equ	UBRR1H	= 0xcd	; MEMORY MAPPED
                                 .equ	UCSR1C	= 0xca	; MEMORY MAPPED
                                 .equ	UCSR1B	= 0xc9	; MEMORY MAPPED
                                 .equ	UCSR1A	= 0xc8	; MEMORY MAPPED
                                 .equ	UDR0	= 0xc6	; MEMORY MAPPED
                                 .equ	UBRR0L	= 0xc4	; MEMORY MAPPED
                                 .equ	UBRR0H	= 0xc5	; MEMORY MAPPED
                                 .equ	UCSR0C	= 0xc2	; MEMORY MAPPED
                                 .equ	UCSR0B	= 0xc1	; MEMORY MAPPED
                                 .equ	UCSR0A	= 0xc0	; MEMORY MAPPED
                                 .equ	TWAMR	= 0xbd	; MEMORY MAPPED
                                 .equ	TWCR	= 0xbc	; MEMORY MAPPED
                                 .equ	TWDR	= 0xbb	; MEMORY MAPPED
                                 .equ	TWAR	= 0xba	; MEMORY MAPPED
                                 .equ	TWSR	= 0xb9	; MEMORY MAPPED
                                 .equ	TWBR	= 0xb8	; MEMORY MAPPED
                                 .equ	ASSR	= 0xb6	; MEMORY MAPPED
                                 .equ	OCR2B	= 0xb4	; MEMORY MAPPED
                                 .equ	OCR2A	= 0xb3	; MEMORY MAPPED
                                 .equ	TCNT2	= 0xb2	; MEMORY MAPPED
                                 .equ	TCCR2B	= 0xb1	; MEMORY MAPPED
                                 .equ	TCCR2A	= 0xb0	; MEMORY MAPPED
                                 .equ	OCR4CL	= 0xac	; MEMORY MAPPED
                                 .equ	OCR4CH	= 0xad	; MEMORY MAPPED
                                 .equ	OCR4BL	= 0xaa	; MEMORY MAPPED
                                 .equ	OCR4BH	= 0xab	; MEMORY MAPPED
                                 .equ	OCR4AL	= 0xa8	; MEMORY MAPPED
                                 .equ	OCR4AH	= 0xa9	; MEMORY MAPPED
                                 .equ	ICR4L	= 0xa6	; MEMORY MAPPED
                                 .equ	ICR4H	= 0xa7	; MEMORY MAPPED
                                 .equ	TCNT4L	= 0xa4	; MEMORY MAPPED
                                 .equ	TCNT4H	= 0xa5	; MEMORY MAPPED
                                 .equ	TCCR4C	= 0xa2	; MEMORY MAPPED
                                 .equ	TCCR4B	= 0xa1	; MEMORY MAPPED
                                 .equ	TCCR4A	= 0xa0	; MEMORY MAPPED
                                 .equ	OCR3CL	= 0x9c	; MEMORY MAPPED
                                 .equ	OCR3CH	= 0x9d	; MEMORY MAPPED
                                 .equ	OCR3BL	= 0x9a	; MEMORY MAPPED
                                 .equ	OCR3BH	= 0x9b	; MEMORY MAPPED
                                 .equ	OCR3AL	= 0x98	; MEMORY MAPPED
                                 .equ	OCR3AH	= 0x99	; MEMORY MAPPED
                                 .equ	ICR3L	= 0x96	; MEMORY MAPPED
                                 .equ	ICR3H	= 0x97	; MEMORY MAPPED
                                 .equ	TCNT3L	= 0x94	; MEMORY MAPPED
                                 .equ	TCNT3H	= 0x95	; MEMORY MAPPED
                                 .equ	TCCR3C	= 0x92	; MEMORY MAPPED
                                 .equ	TCCR3B	= 0x91	; MEMORY MAPPED
                                 .equ	TCCR3A	= 0x90	; MEMORY MAPPED
                                 .equ	OCR1CL	= 0x8c	; MEMORY MAPPED
                                 .equ	OCR1CH	= 0x8d	; MEMORY MAPPED
                                 .equ	OCR1BL	= 0x8a	; MEMORY MAPPED
                                 .equ	OCR1BH	= 0x8b	; MEMORY MAPPED
                                 .equ	OCR1AL	= 0x88	; MEMORY MAPPED
                                 .equ	OCR1AH	= 0x89	; MEMORY MAPPED
                                 .equ	ICR1L	= 0x86	; MEMORY MAPPED
                                 .equ	ICR1H	= 0x87	; MEMORY MAPPED
                                 .equ	TCNT1L	= 0x84	; MEMORY MAPPED
                                 .equ	TCNT1H	= 0x85	; MEMORY MAPPED
                                 .equ	TCCR1C	= 0x82	; MEMORY MAPPED
                                 .equ	TCCR1B	= 0x81	; MEMORY MAPPED
                                 .equ	TCCR1A	= 0x80	; MEMORY MAPPED
                                 .equ	DIDR1	= 0x7f	; MEMORY MAPPED
                                 .equ	DIDR0	= 0x7e	; MEMORY MAPPED
                                 .equ	DIDR2	= 0x7d	; MEMORY MAPPED
                                 .equ	ADMUX	= 0x7c	; MEMORY MAPPED
                                 .equ	ADCSRB	= 0x7b	; MEMORY MAPPED
                                 .equ	ADCSRA	= 0x7a	; MEMORY MAPPED
                                 .equ	ADCH	= 0x79	; MEMORY MAPPED
                                 .equ	ADCL	= 0x78	; MEMORY MAPPED
                                 .equ	XMCRB	= 0x75	; MEMORY MAPPED
                                 .equ	XMCRA	= 0x74	; MEMORY MAPPED
                                 .equ	TIMSK5	= 0x73	; MEMORY MAPPED
                                 .equ	TIMSK4	= 0x72	; MEMORY MAPPED
                                 .equ	TIMSK3	= 0x71	; MEMORY MAPPED
                                 .equ	TIMSK2	= 0x70	; MEMORY MAPPED
                                 .equ	TIMSK1	= 0x6f	; MEMORY MAPPED
                                 .equ	TIMSK0	= 0x6e	; MEMORY MAPPED
                                 .equ	PCMSK2	= 0x6d	; MEMORY MAPPED
                                 .equ	PCMSK1	= 0x6c	; MEMORY MAPPED
                                 .equ	PCMSK0	= 0x6b	; MEMORY MAPPED
                                 .equ	EICRB	= 0x6a	; MEMORY MAPPED
                                 .equ	EICRA	= 0x69	; MEMORY MAPPED
                                 .equ	PCICR	= 0x68	; MEMORY MAPPED
                                 .equ	OSCCAL	= 0x66	; MEMORY MAPPED
                                 .equ	PRR1	= 0x65	; MEMORY MAPPED
                                 .equ	PRR0	= 0x64	; MEMORY MAPPED
                                 .equ	CLKPR	= 0x61	; MEMORY MAPPED
                                 .equ	WDTCSR	= 0x60	; MEMORY MAPPED
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	EIND	= 0x3c
                                 .equ	RAMPZ	= 0x3b
                                 .equ	SPMCSR	= 0x37
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUSR	= 0x34
                                 .equ	SMCR	= 0x33
                                 .equ	OCDR	= 0x31
                                 .equ	ACSR	= 0x30
                                 .equ	SPDR	= 0x2e
                                 .equ	SPSR	= 0x2d
                                 .equ	SPCR	= 0x2c
                                 .equ	GPIOR2	= 0x2b
                                 .equ	GPIOR1	= 0x2a
                                 .equ	OCR0B	= 0x28
                                 .equ	OCR0A	= 0x27
                                 .equ	TCNT0	= 0x26
                                 .equ	TCCR0B	= 0x25
                                 .equ	TCCR0A	= 0x24
                                 .equ	GTCCR	= 0x23
                                 .equ	EEARH	= 0x22
                                 .equ	EEARL	= 0x21
                                 .equ	EEDR	= 0x20
                                 .equ	EECR	= 0x1f
                                 .equ	GPIOR0	= 0x1e
                                 .equ	EIMSK	= 0x1d
                                 .equ	EIFR	= 0x1c
                                 .equ	PCIFR	= 0x1b
                                 .equ	TIFR5	= 0x1a
                                 .equ	TIFR4	= 0x19
                                 .equ	TIFR3	= 0x18
                                 .equ	TIFR2	= 0x17
                                 .equ	TIFR1	= 0x16
                                 .equ	TIFR0	= 0x15
                                 .equ	PORTG	= 0x14
                                 .equ	DDRG	= 0x13
                                 .equ	PING	= 0x12
                                 .equ	PORTF	= 0x11
                                 .equ	DDRF	= 0x10
                                 .equ	PINF	= 0x0f
                                 .equ	PORTE	= 0x0e
                                 .equ	DDRE	= 0x0d
                                 .equ	PINE	= 0x0c
                                 .equ	PORTD	= 0x0b
                                 .equ	DDRD	= 0x0a
                                 .equ	PIND	= 0x09
                                 .equ	PORTC	= 0x08
                                 .equ	DDRC	= 0x07
                                 .equ	PINC	= 0x06
                                 .equ	PORTB	= 0x05
                                 .equ	DDRB	= 0x04
                                 .equ	PINB	= 0x03
                                 .equ	PORTA	= 0x02
                                 .equ	DDRA	= 0x01
                                 .equ	PINA	= 0x00
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; ADCSRB - ADC Control and Status Register B
                                 .equ	ACME	= 6	; Analog Comparator Multiplexer Enable
                                 
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 ; DIDR1 - Digital Input Disable Register 1
                                 .equ	AIN0D	= 0	; AIN0 Digital Input Disable
                                 .equ	AIN1D	= 1	; AIN1 Digital Input Disable
                                 
                                 
                                 ; ***** USART0 ***********************
                                 ; UDR0 - USART I/O Data Register
                                 .equ	UDR0_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR0_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR0_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR0_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR0_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR0_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR0_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR0_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR0A - USART Control and Status Register A
                                 .equ	MPCM0	= 0	; Multi-processor Communication Mode
                                 .equ	U2X0	= 1	; Double the USART transmission speed
                                 .equ	UPE0	= 2	; Parity Error
                                 .equ	DOR0	= 3	; Data overRun
                                 .equ	FE0	= 4	; Framing Error
                                 .equ	UDRE0	= 5	; USART Data Register Empty
                                 .equ	TXC0	= 6	; USART Transmitt Complete
                                 .equ	RXC0	= 7	; USART Receive Complete
                                 
                                 ; UCSR0B - USART Control and Status Register B
                                 .equ	TXB80	= 0	; Transmit Data Bit 8
                                 .equ	RXB80	= 1	; Receive Data Bit 8
                                 .equ	UCSZ02	= 2	; Character Size
                                 .equ	TXEN0	= 3	; Transmitter Enable
                                 .equ	RXEN0	= 4	; Receiver Enable
                                 .equ	UDRIE0	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE0	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE0	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR0C - USART Control and Status Register C
                                 .equ	UCPOL0	= 0	; Clock Polarity
                                 .equ	UCSZ00	= 1	; Character Size
                                 .equ	UCPHA0	= UCSZ00	; For compatibility
                                 .equ	UCSZ01	= 2	; Character Size
                                 .equ	UDORD0	= UCSZ01	; For compatibility
                                 .equ	USBS0	= 3	; Stop Bit Select
                                 .equ	UPM00	= 4	; Parity Mode Bit 0
                                 .equ	UPM01	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL00	= 6	; USART Mode Select
                                 .equ	UMSEL0	= UMSEL00	; For compatibility
                                 .equ	UMSEL01	= 7	; USART Mode Select
                                 .equ	UMSEL1	= UMSEL01	; For compatibility
                                 
                                 ; UBRR0H - USART Baud Rate Register High Byte
                                 .equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR0L - USART Baud Rate Register Low Byte
                                 .equ	_UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	_UBRR1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** TWI **************************
                                 ; TWAMR - TWI (Slave) Address Mask Register
                                 .equ	TWAM0	= 1	; 
                                 .equ	TWAMR0	= TWAM0	; For compatibility
                                 .equ	TWAM1	= 2	; 
                                 .equ	TWAMR1	= TWAM1	; For compatibility
                                 .equ	TWAM2	= 3	; 
                                 .equ	TWAMR2	= TWAM2	; For compatibility
                                 .equ	TWAM3	= 4	; 
                                 .equ	TWAMR3	= TWAM3	; For compatibility
                                 .equ	TWAM4	= 5	; 
                                 .equ	TWAMR4	= TWAM4	; For compatibility
                                 .equ	TWAM5	= 6	; 
                                 .equ	TWAMR5	= TWAM5	; For compatibility
                                 .equ	TWAM6	= 7	; 
                                 .equ	TWAMR6	= TWAM6	; For compatibility
                                 
                                 ; TWBR - TWI Bit Rate register
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	TWPS0	= 0	; TWI Prescaler
                                 .equ	TWPS1	= 1	; TWI Prescaler
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	TWS7	= 7	; TWI Status
                                 
                                 ; TWDR - TWI Data register
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** PORTA ************************
                                 ; PORTA - Port A Data Register
                                 .equ	PORTA0	= 0	; Port A Data Register bit 0
                                 .equ	PA0	= 0	; For compatibility
                                 .equ	PORTA1	= 1	; Port A Data Register bit 1
                                 .equ	PA1	= 1	; For compatibility
                                 .equ	PORTA2	= 2	; Port A Data Register bit 2
                                 .equ	PA2	= 2	; For compatibility
                                 .equ	PORTA3	= 3	; Port A Data Register bit 3
                                 .equ	PA3	= 3	; For compatibility
                                 .equ	PORTA4	= 4	; Port A Data Register bit 4
                                 .equ	PA4	= 4	; For compatibility
                                 .equ	PORTA5	= 5	; Port A Data Register bit 5
                                 .equ	PA5	= 5	; For compatibility
                                 .equ	PORTA6	= 6	; Port A Data Register bit 6
                                 .equ	PA6	= 6	; For compatibility
                                 .equ	PORTA7	= 7	; Port A Data Register bit 7
                                 .equ	PA7	= 7	; For compatibility
                                 
                                 ; DDRA - Port A Data Direction Register
                                 .equ	DDA0	= 0	; Data Direction Register, Port A, bit 0
                                 .equ	DDA1	= 1	; Data Direction Register, Port A, bit 1
                                 .equ	DDA2	= 2	; Data Direction Register, Port A, bit 2
                                 .equ	DDA3	= 3	; Data Direction Register, Port A, bit 3
                                 .equ	DDA4	= 4	; Data Direction Register, Port A, bit 4
                                 .equ	DDA5	= 5	; Data Direction Register, Port A, bit 5
                                 .equ	DDA6	= 6	; Data Direction Register, Port A, bit 6
                                 .equ	DDA7	= 7	; Data Direction Register, Port A, bit 7
                                 
                                 ; PINA - Port A Input Pins
                                 .equ	PINA0	= 0	; Input Pins, Port A bit 0
                                 .equ	PINA1	= 1	; Input Pins, Port A bit 1
                                 .equ	PINA2	= 2	; Input Pins, Port A bit 2
                                 .equ	PINA3	= 3	; Input Pins, Port A bit 3
                                 .equ	PINA4	= 4	; Input Pins, Port A bit 4
                                 .equ	PINA5	= 5	; Input Pins, Port A bit 5
                                 .equ	PINA6	= 6	; Input Pins, Port A bit 6
                                 .equ	PINA7	= 7	; Input Pins, Port A bit 7
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 .equ	PORTC7	= 7	; Port C Data Register bit 7
                                 .equ	PC7	= 7	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 .equ	DDC7	= 7	; Port C Data Direction Register bit 7
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 .equ	PINC7	= 7	; Port C Input Pins bit 7
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** PORTE ************************
                                 ; PORTE - Data Register, Port E
                                 .equ	PORTE0	= 0	; 
                                 .equ	PE0	= 0	; For compatibility
                                 .equ	PORTE1	= 1	; 
                                 .equ	PE1	= 1	; For compatibility
                                 .equ	PORTE2	= 2	; 
                                 .equ	PE2	= 2	; For compatibility
                                 .equ	PORTE3	= 3	; 
                                 .equ	PE3	= 3	; For compatibility
                                 .equ	PORTE4	= 4	; 
                                 .equ	PE4	= 4	; For compatibility
                                 .equ	PORTE5	= 5	; 
                                 .equ	PE5	= 5	; For compatibility
                                 .equ	PORTE6	= 6	; 
                                 .equ	PE6	= 6	; For compatibility
                                 .equ	PORTE7	= 7	; 
                                 .equ	PE7	= 7	; For compatibility
                                 
                                 ; DDRE - Data Direction Register, Port E
                                 .equ	DDE0	= 0	; 
                                 .equ	DDE1	= 1	; 
                                 .equ	DDE2	= 2	; 
                                 .equ	DDE3	= 3	; 
                                 .equ	DDE4	= 4	; 
                                 .equ	DDE5	= 5	; 
                                 .equ	DDE6	= 6	; 
                                 .equ	DDE7	= 7	; 
                                 
                                 ; PINE - Input Pins, Port E
                                 .equ	PINE0	= 0	; 
                                 .equ	PINE1	= 1	; 
                                 .equ	PINE2	= 2	; 
                                 .equ	PINE3	= 3	; 
                                 .equ	PINE4	= 4	; 
                                 .equ	PINE5	= 5	; 
                                 .equ	PINE6	= 6	; 
                                 .equ	PINE7	= 7	; 
                                 
                                 
                                 ; ***** PORTF ************************
                                 ; PORTF - Data Register, Port F
                                 .equ	PORTF0	= 0	; 
                                 .equ	PF0	= 0	; For compatibility
                                 .equ	PORTF1	= 1	; 
                                 .equ	PF1	= 1	; For compatibility
                                 .equ	PORTF2	= 2	; 
                                 .equ	PF2	= 2	; For compatibility
                                 .equ	PORTF3	= 3	; 
                                 .equ	PF3	= 3	; For compatibility
                                 .equ	PORTF4	= 4	; 
                                 .equ	PF4	= 4	; For compatibility
                                 .equ	PORTF5	= 5	; 
                                 .equ	PF5	= 5	; For compatibility
                                 .equ	PORTF6	= 6	; 
                                 .equ	PF6	= 6	; For compatibility
                                 .equ	PORTF7	= 7	; 
                                 .equ	PF7	= 7	; For compatibility
                                 
                                 ; DDRF - Data Direction Register, Port F
                                 .equ	DDF0	= 0	; 
                                 .equ	DDF1	= 1	; 
                                 .equ	DDF2	= 2	; 
                                 .equ	DDF3	= 3	; 
                                 .equ	DDF4	= 4	; 
                                 .equ	DDF5	= 5	; 
                                 .equ	DDF6	= 6	; 
                                 .equ	DDF7	= 7	; 
                                 
                                 ; PINF - Input Pins, Port F
                                 .equ	PINF0	= 0	; 
                                 .equ	PINF1	= 1	; 
                                 .equ	PINF2	= 2	; 
                                 .equ	PINF3	= 3	; 
                                 .equ	PINF4	= 4	; 
                                 .equ	PINF5	= 5	; 
                                 .equ	PINF6	= 6	; 
                                 .equ	PINF7	= 7	; 
                                 
                                 
                                 ; ***** PORTG ************************
                                 ; PORTG - Data Register, Port G
                                 .equ	PORTG0	= 0	; 
                                 .equ	PG0	= 0	; For compatibility
                                 .equ	PORTG1	= 1	; 
                                 .equ	PG1	= 1	; For compatibility
                                 .equ	PORTG2	= 2	; 
                                 .equ	PG2	= 2	; For compatibility
                                 .equ	PORTG3	= 3	; 
                                 .equ	PG3	= 3	; For compatibility
                                 .equ	PORTG4	= 4	; 
                                 .equ	PG4	= 4	; For compatibility
                                 .equ	PORTG5	= 5	; 
                                 .equ	PG5	= 5	; For compatibility
                                 
                                 ; DDRG - Data Direction Register, Port G
                                 .equ	DDG0	= 0	; 
                                 .equ	DDG1	= 1	; 
                                 .equ	DDG2	= 2	; 
                                 .equ	DDG3	= 3	; 
                                 .equ	DDG4	= 4	; 
                                 .equ	DDG5	= 5	; 
                                 
                                 ; PING - Input Pins, Port G
                                 .equ	PING0	= 0	; 
                                 .equ	PING1	= 1	; 
                                 .equ	PING2	= 2	; 
                                 .equ	PING3	= 3	; 
                                 .equ	PING4	= 4	; 
                                 .equ	PING5	= 5	; 
                                 
                                 
                                 ; ***** PORTH ************************
                                 ; PORTH - PORT H Data Register
                                 .equ	PORTH0	= 0	; PORT H Data Register bit 0
                                 .equ	PH0	= 0	; For compatibility
                                 .equ	PORTH1	= 1	; PORT H Data Register bit 1
                                 .equ	PH1	= 1	; For compatibility
                                 .equ	PORTH2	= 2	; PORT H Data Register bit 2
                                 .equ	PH2	= 2	; For compatibility
                                 .equ	PORTH3	= 3	; PORT H Data Register bit 3
                                 .equ	PH3	= 3	; For compatibility
                                 .equ	PORTH4	= 4	; PORT H Data Register bit 4
                                 .equ	PH4	= 4	; For compatibility
                                 .equ	PORTH5	= 5	; PORT H Data Register bit 5
                                 .equ	PH5	= 5	; For compatibility
                                 .equ	PORTH6	= 6	; PORT H Data Register bit 6
                                 .equ	PH6	= 6	; For compatibility
                                 .equ	PORTH7	= 7	; PORT H Data Register bit 7
                                 .equ	PH7	= 7	; For compatibility
                                 
                                 ; DDRH - PORT H Data Direction Register
                                 .equ	DDH0	= 0	; PORT H Data Direction Register bit 0
                                 .equ	DDH1	= 1	; PORT H Data Direction Register bit 1
                                 .equ	DDH2	= 2	; PORT H Data Direction Register bit 2
                                 .equ	DDH3	= 3	; PORT H Data Direction Register bit 3
                                 .equ	DDH4	= 4	; PORT H Data Direction Register bit 4
                                 .equ	DDH5	= 5	; PORT H Data Direction Register bit 5
                                 .equ	DDH6	= 6	; PORT H Data Direction Register bit 6
                                 .equ	DDH7	= 7	; PORT H Data Direction Register bit 7
                                 
                                 ; PINH - PORT H Input Pins
                                 .equ	PINH0	= 0	; PORT H Input Pins bit 0
                                 .equ	PINH1	= 1	; PORT H Input Pins bit 1
                                 .equ	PINH2	= 2	; PORT H Input Pins bit 2
                                 .equ	PINH3	= 3	; PORT H Input Pins bit 3
                                 .equ	PINH4	= 4	; PORT H Input Pins bit 4
                                 .equ	PINH5	= 5	; PORT H Input Pins bit 5
                                 .equ	PINH6	= 6	; PORT H Input Pins bit 6
                                 .equ	PINH7	= 7	; PORT H Input Pins bit 7
                                 
                                 
                                 ; ***** PORTJ ************************
                                 ; PORTJ - PORT J Data Register
                                 .equ	PORTJ0	= 0	; PORT J Data Register bit 0
                                 .equ	PJ0	= 0	; For compatibility
                                 .equ	PORTJ1	= 1	; PORT J Data Register bit 1
                                 .equ	PJ1	= 1	; For compatibility
                                 .equ	PORTJ2	= 2	; PORT J Data Register bit 2
                                 .equ	PJ2	= 2	; For compatibility
                                 .equ	PORTJ3	= 3	; PORT J Data Register bit 3
                                 .equ	PJ3	= 3	; For compatibility
                                 .equ	PORTJ4	= 4	; PORT J Data Register bit 4
                                 .equ	PJ4	= 4	; For compatibility
                                 .equ	PORTJ5	= 5	; PORT J Data Register bit 5
                                 .equ	PJ5	= 5	; For compatibility
                                 .equ	PORTJ6	= 6	; PORT J Data Register bit 6
                                 .equ	PJ6	= 6	; For compatibility
                                 .equ	PORTJ7	= 7	; PORT J Data Register bit 7
                                 .equ	PJ7	= 7	; For compatibility
                                 
                                 ; DDRJ - PORT J Data Direction Register
                                 .equ	DDJ0	= 0	; PORT J Data Direction Register bit 0
                                 .equ	DDJ1	= 1	; PORT J Data Direction Register bit 1
                                 .equ	DDJ2	= 2	; PORT J Data Direction Register bit 2
                                 .equ	DDJ3	= 3	; PORT J Data Direction Register bit 3
                                 .equ	DDJ4	= 4	; PORT J Data Direction Register bit 4
                                 .equ	DDJ5	= 5	; PORT J Data Direction Register bit 5
                                 .equ	DDJ6	= 6	; PORT J Data Direction Register bit 6
                                 .equ	DDJ7	= 7	; PORT J Data Direction Register bit 7
                                 
                                 ; PINJ - PORT J Input Pins
                                 .equ	PINJ0	= 0	; PORT J Input Pins bit 0
                                 .equ	PINJ1	= 1	; PORT J Input Pins bit 1
                                 .equ	PINJ2	= 2	; PORT J Input Pins bit 2
                                 .equ	PINJ3	= 3	; PORT J Input Pins bit 3
                                 .equ	PINJ4	= 4	; PORT J Input Pins bit 4
                                 .equ	PINJ5	= 5	; PORT J Input Pins bit 5
                                 .equ	PINJ6	= 6	; PORT J Input Pins bit 6
                                 .equ	PINJ7	= 7	; PORT J Input Pins bit 7
                                 
                                 
                                 ; ***** PORTK ************************
                                 ; PORTK - PORT K Data Register
                                 .equ	PORTK0	= 0	; PORT K Data Register bit 0
                                 .equ	PK0	= 0	; For compatibility
                                 .equ	PORTK1	= 1	; PORT K Data Register bit 1
                                 .equ	PK1	= 1	; For compatibility
                                 .equ	PORTK2	= 2	; PORT K Data Register bit 2
                                 .equ	PK2	= 2	; For compatibility
                                 .equ	PORTK3	= 3	; PORT K Data Register bit 3
                                 .equ	PK3	= 3	; For compatibility
                                 .equ	PORTK4	= 4	; PORT K Data Register bit 4
                                 .equ	PK4	= 4	; For compatibility
                                 .equ	PORTK5	= 5	; PORT K Data Register bit 5
                                 .equ	PK5	= 5	; For compatibility
                                 .equ	PORTK6	= 6	; PORT K Data Register bit 6
                                 .equ	PK6	= 6	; For compatibility
                                 .equ	PORTK7	= 7	; PORT K Data Register bit 7
                                 .equ	PK7	= 7	; For compatibility
                                 
                                 ; DDRK - PORT K Data Direction Register
                                 .equ	DDK0	= 0	; PORT K Data Direction Register bit 0
                                 .equ	DDK1	= 1	; PORT K Data Direction Register bit 1
                                 .equ	DDK2	= 2	; PORT K Data Direction Register bit 2
                                 .equ	DDK3	= 3	; PORT K Data Direction Register bit 3
                                 .equ	DDK4	= 4	; PORT K Data Direction Register bit 4
                                 .equ	DDK5	= 5	; PORT K Data Direction Register bit 5
                                 .equ	DDK6	= 6	; PORT K Data Direction Register bit 6
                                 .equ	DDK7	= 7	; PORT K Data Direction Register bit 7
                                 
                                 ; PINK - PORT K Input Pins
                                 .equ	PINK0	= 0	; PORT K Input Pins bit 0
                                 .equ	PINK1	= 1	; PORT K Input Pins bit 1
                                 .equ	PINK2	= 2	; PORT K Input Pins bit 2
                                 .equ	PINK3	= 3	; PORT K Input Pins bit 3
                                 .equ	PINK4	= 4	; PORT K Input Pins bit 4
                                 .equ	PINK5	= 5	; PORT K Input Pins bit 5
                                 .equ	PINK6	= 6	; PORT K Input Pins bit 6
                                 .equ	PINK7	= 7	; PORT K Input Pins bit 7
                                 
                                 
                                 ; ***** PORTL ************************
                                 ; PORTL - PORT L Data Register
                                 .equ	PORTL0	= 0	; PORT L Data Register bit 0
                                 .equ	PL0	= 0	; For compatibility
                                 .equ	PORTL1	= 1	; PORT L Data Register bit 1
                                 .equ	PL1	= 1	; For compatibility
                                 .equ	PORTL2	= 2	; PORT L Data Register bit 2
                                 .equ	PL2	= 2	; For compatibility
                                 .equ	PORTL3	= 3	; PORT L Data Register bit 3
                                 .equ	PL3	= 3	; For compatibility
                                 .equ	PORTL4	= 4	; PORT L Data Register bit 4
                                 .equ	PL4	= 4	; For compatibility
                                 .equ	PORTL5	= 5	; PORT L Data Register bit 5
                                 .equ	PL5	= 5	; For compatibility
                                 .equ	PORTL6	= 6	; PORT L Data Register bit 6
                                 .equ	PL6	= 6	; For compatibility
                                 .equ	PORTL7	= 7	; PORT L Data Register bit 7
                                 .equ	PL7	= 7	; For compatibility
                                 
                                 ; DDRL - PORT L Data Direction Register
                                 .equ	DDL0	= 0	; PORT L Data Direction Register bit 0
                                 .equ	DDL1	= 1	; PORT L Data Direction Register bit 1
                                 .equ	DDL2	= 2	; PORT L Data Direction Register bit 2
                                 .equ	DDL3	= 3	; PORT L Data Direction Register bit 3
                                 .equ	DDL4	= 4	; PORT L Data Direction Register bit 4
                                 .equ	DDL5	= 5	; PORT L Data Direction Register bit 5
                                 .equ	DDL6	= 6	; PORT L Data Direction Register bit 6
                                 .equ	DDL7	= 7	; PORT L Data Direction Register bit 7
                                 
                                 ; PINL - PORT L Input Pins
                                 .equ	PINL0	= 0	; PORT L Input Pins bit 0
                                 .equ	PINL1	= 1	; PORT L Input Pins bit 1
                                 .equ	PINL2	= 2	; PORT L Input Pins bit 2
                                 .equ	PINL3	= 3	; PORT L Input Pins bit 3
                                 .equ	PINL4	= 4	; PORT L Input Pins bit 4
                                 .equ	PINL5	= 5	; PORT L Input Pins bit 5
                                 .equ	PINL6	= 6	; PORT L Input Pins bit 6
                                 .equ	PINL7	= 7	; PORT L Input Pins bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TIMSK0 - Timer/Counter0 Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0A	= 1	; Timer/Counter0 Output Compare Match A Interrupt Enable
                                 .equ	OCIE0B	= 2	; Timer/Counter0 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR0 - Timer/Counter0 Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0A	= 1	; Timer/Counter0 Output Compare Flag 0A
                                 .equ	OCF0B	= 2	; Timer/Counter0 Output Compare Flag 0B
                                 
                                 ; TCCR0A - Timer/Counter  Control Register A
                                 .equ	WGM00	= 0	; Waveform Generation Mode
                                 .equ	WGM01	= 1	; Waveform Generation Mode
                                 .equ	COM0B0	= 4	; Compare Output Mode, Fast PWm
                                 .equ	COM0B1	= 5	; Compare Output Mode, Fast PWm
                                 .equ	COM0A0	= 6	; Compare Output Mode, Phase Correct PWM Mode
                                 .equ	COM0A1	= 7	; Compare Output Mode, Phase Correct PWM Mode
                                 
                                 ; TCCR0B - Timer/Counter Control Register B
                                 .equ	CS00	= 0	; Clock Select
                                 .equ	CS01	= 1	; Clock Select
                                 .equ	CS02	= 2	; Clock Select
                                 .equ	WGM02	= 3	; 
                                 .equ	FOC0B	= 6	; Force Output Compare B
                                 .equ	FOC0A	= 7	; Force Output Compare A
                                 
                                 ; TCNT0 - Timer/Counter0
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0A - Timer/Counter0 Output Compare Register
                                 .equ	OCR0A_0	= 0	; 
                                 .equ	OCR0A_1	= 1	; 
                                 .equ	OCR0A_2	= 2	; 
                                 .equ	OCR0A_3	= 3	; 
                                 .equ	OCR0A_4	= 4	; 
                                 .equ	OCR0A_5	= 5	; 
                                 .equ	OCR0A_6	= 6	; 
                                 .equ	OCR0A_7	= 7	; 
                                 
                                 ; OCR0B - Timer/Counter0 Output Compare Register
                                 .equ	OCR0B_0	= 0	; 
                                 .equ	OCR0B_1	= 1	; 
                                 .equ	OCR0B_2	= 2	; 
                                 .equ	OCR0B_3	= 3	; 
                                 .equ	OCR0B_4	= 4	; 
                                 .equ	OCR0B_5	= 5	; 
                                 .equ	OCR0B_6	= 6	; 
                                 .equ	OCR0B_7	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 .equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	PSR10	= PSRSYNC	; For compatibility
                                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK2 - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 0	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	TOIE2A	= TOIE2	; For compatibility
                                 .equ	OCIE2A	= 1	; Timer/Counter2 Output Compare Match A Interrupt Enable
                                 .equ	OCIE2B	= 2	; Timer/Counter2 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR2 - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 0	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2A	= 1	; Output Compare Flag 2A
                                 .equ	OCF2B	= 2	; Output Compare Flag 2B
                                 
                                 ; TCCR2A - Timer/Counter2 Control Register A
                                 .equ	WGM20	= 0	; Waveform Genration Mode
                                 .equ	WGM21	= 1	; Waveform Genration Mode
                                 .equ	COM2B0	= 4	; Compare Output Mode bit 0
                                 .equ	COM2B1	= 5	; Compare Output Mode bit 1
                                 .equ	COM2A0	= 6	; Compare Output Mode bit 1
                                 .equ	COM2A1	= 7	; Compare Output Mode bit 1
                                 
                                 ; TCCR2B - Timer/Counter2 Control Register B
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM22	= 3	; Waveform Generation Mode
                                 .equ	FOC2B	= 6	; Force Output Compare B
                                 .equ	FOC2A	= 7	; Force Output Compare A
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2A - Timer/Counter2 Output Compare Register A
                                 .equ	OCR2A_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2A_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2A_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2A_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2A_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2A_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2A_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2A_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; OCR2B - Timer/Counter2 Output Compare Register B
                                 .equ	OCR2B_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2B_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2B_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2B_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2B_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2B_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2B_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2B_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2BUB	= 0	; Timer/Counter Control Register2 Update Busy
                                 .equ	TCR2AUB	= 1	; Timer/Counter Control Register2 Update Busy
                                 .equ	OCR2BUB	= 2	; Output Compare Register 2 Update Busy
                                 .equ	OCR2AUB	= 3	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 4	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 5	; Asynchronous Timer/Counter2
                                 .equ	EXCLK	= 6	; Enable External Clock Input
                                 
                                 ; GTCCR - General Timer Counter Control register
                                 .equ	PSRASY	= 1	; Prescaler Reset Timer/Counter2
                                 .equ	PSR2	= PSRASY	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCSR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDCE	= 4	; Watchdog Change Enable
                                 .equ	WDP3	= 5	; Watchdog Timer Prescaler Bit 3
                                 .equ	WDIE	= 6	; Watchdog Timeout Interrupt Enable
                                 .equ	WDIF	= 7	; Watchdog Timeout Interrupt Flag
                                 
                                 
                                 ; ***** USART1 ***********************
                                 ; UDR1 - USART I/O Data Register
                                 .equ	UDR1_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR1_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR1_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR1_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR1_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR1_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR1_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR1_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR1A - USART Control and Status Register A
                                 .equ	MPCM1	= 0	; Multi-processor Communication Mode
                                 .equ	U2X1	= 1	; Double the USART transmission speed
                                 .equ	UPE1	= 2	; Parity Error
                                 .equ	DOR1	= 3	; Data overRun
                                 .equ	FE1	= 4	; Framing Error
                                 .equ	UDRE1	= 5	; USART Data Register Empty
                                 .equ	TXC1	= 6	; USART Transmitt Complete
                                 .equ	RXC1	= 7	; USART Receive Complete
                                 
                                 ; UCSR1B - USART Control and Status Register B
                                 .equ	TXB81	= 0	; Transmit Data Bit 8
                                 .equ	RXB81	= 1	; Receive Data Bit 8
                                 .equ	UCSZ12	= 2	; Character Size
                                 .equ	TXEN1	= 3	; Transmitter Enable
                                 .equ	RXEN1	= 4	; Receiver Enable
                                 .equ	UDRIE1	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE1	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE1	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR1C - USART Control and Status Register C
                                 .equ	UCPOL1	= 0	; Clock Polarity
                                 .equ	UCSZ10	= 1	; Character Size
                                 .equ	UCPHA1	= UCSZ10	; For compatibility
                                 .equ	UCSZ11	= 2	; Character Size
                                 .equ	UDORD1	= UCSZ11	; For compatibility
                                 .equ	USBS1	= 3	; Stop Bit Select
                                 .equ	UPM10	= 4	; Parity Mode Bit 0
                                 .equ	UPM11	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL10	= 6	; USART Mode Select
                                 .equ	UMSEL11	= 7	; USART Mode Select
                                 
                                 ; UBRR1H - USART Baud Rate Register High Byte
                                 .equ	UBRR_8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR_9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR_10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR_11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR1L - USART Baud Rate Register Low Byte
                                 .equ	UBRR_0	= 0	; USART Baud Rate Register bit 0
                                 .equ	UBRR_1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR_2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR_3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR_4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR_5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR_6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR_7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEARH - EEPROM Address Register Low Byte
                                 .equ	EEAR8	= 0	; EEPROM Read/Write Access Bit 8
                                 .equ	EEAR9	= 1	; EEPROM Read/Write Access Bit 9
                                 .equ	EEAR10	= 2	; EEPROM Read/Write Access Bit 10
                                 .equ	EEAR11	= 3	; EEPROM Read/Write Access Bit 11
                                 
                                 ; EEARL - EEPROM Address Register Low Byte
                                 .equ	EEAR0	= 0	; EEPROM Read/Write Access Bit 0
                                 .equ	EEAR1	= 1	; EEPROM Read/Write Access Bit 1
                                 .equ	EEAR2	= 2	; EEPROM Read/Write Access Bit 2
                                 .equ	EEAR3	= 3	; EEPROM Read/Write Access Bit 3
                                 .equ	EEAR4	= 4	; EEPROM Read/Write Access Bit 4
                                 .equ	EEAR5	= 5	; EEPROM Read/Write Access Bit 5
                                 .equ	EEAR6	= 6	; EEPROM Read/Write Access Bit 6
                                 .equ	EEAR7	= 7	; EEPROM Read/Write Access Bit 7
                                 
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEPE	= 1	; EEPROM Write Enable
                                 .equ	EEMPE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 .equ	EEPM0	= 4	; EEPROM Programming Mode Bit 0
                                 .equ	EEPM1	= 5	; EEPROM Programming Mode Bit 1
                                 
                                 
                                 ; ***** TIMER_COUNTER_5 **************
                                 ; TIMSK5 - Timer/Counter5 Interrupt Mask Register
                                 .equ	TOIE5	= 0	; Timer/Counter5 Overflow Interrupt Enable
                                 .equ	OCIE5A	= 1	; Timer/Counter5 Output Compare A Match Interrupt Enable
                                 .equ	OCIE5B	= 2	; Timer/Counter5 Output Compare B Match Interrupt Enable
                                 .equ	OCIE5C	= 3	; Timer/Counter5 Output Compare C Match Interrupt Enable
                                 .equ	ICIE5	= 5	; Timer/Counter5 Input Capture Interrupt Enable
                                 
                                 ; TIFR5 - Timer/Counter5 Interrupt Flag register
                                 .equ	TOV5	= 0	; Timer/Counter5 Overflow Flag
                                 .equ	OCF5A	= 1	; Output Compare Flag 5A
                                 .equ	OCF5B	= 2	; Output Compare Flag 5B
                                 .equ	OCF5C	= 3	; Output Compare Flag 5C
                                 .equ	ICF5	= 5	; Input Capture Flag 5
                                 
                                 ; TCCR5A - Timer/Counter5 Control Register A
                                 .equ	WGM50	= 0	; Waveform Generation Mode
                                 .equ	WGM51	= 1	; Waveform Generation Mode
                                 .equ	COM5C0	= 2	; Compare Output Mode 5C, bit 0
                                 .equ	COM5C1	= 3	; Compare Output Mode 5C, bit 1
                                 .equ	COM5B0	= 4	; Compare Output Mode 5B, bit 0
                                 .equ	COM5B1	= 5	; Compare Output Mode 5B, bit 1
                                 .equ	COM5A0	= 6	; Compare Output Mode 5A, bit 0
                                 .equ	COM5A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR5B - Timer/Counter5 Control Register B
                                 .equ	CS50	= 0	; Prescaler source of Timer/Counter 5
                                 .equ	CS51	= 1	; Prescaler source of Timer/Counter 5
                                 .equ	CS52	= 2	; Prescaler source of Timer/Counter 5
                                 .equ	WGM52	= 3	; Waveform Generation Mode
                                 .equ	WGM53	= 4	; Waveform Generation Mode
                                 .equ	ICES5	= 6	; Input Capture 5 Edge Select
                                 .equ	ICNC5	= 7	; Input Capture 5 Noise Canceler
                                 
                                 ; TCCR5C - Timer/Counter 5 Control Register C
                                 .equ	FOC5C	= 5	; Force Output Compare 5C
                                 .equ	FOC5B	= 6	; Force Output Compare 5B
                                 .equ	FOC5A	= 7	; Force Output Compare 5A
                                 
                                 ; ICR5H - Timer/Counter5 Input Capture Register High Byte
                                 .equ	ICR5H0	= 0	; Timer/Counter5 Input Capture Register High Byte bit 0
                                 .equ	ICR5H1	= 1	; Timer/Counter5 Input Capture Register High Byte bit 1
                                 .equ	ICR5H2	= 2	; Timer/Counter5 Input Capture Register High Byte bit 2
                                 .equ	ICR5H3	= 3	; Timer/Counter5 Input Capture Register High Byte bit 3
                                 .equ	ICR5H4	= 4	; Timer/Counter5 Input Capture Register High Byte bit 4
                                 .equ	ICR5H5	= 5	; Timer/Counter5 Input Capture Register High Byte bit 5
                                 .equ	ICR5H6	= 6	; Timer/Counter5 Input Capture Register High Byte bit 6
                                 .equ	ICR5H7	= 7	; Timer/Counter5 Input Capture Register High Byte bit 7
                                 
                                 ; ICR5L - Timer/Counter5 Input Capture Register Low Byte
                                 .equ	ICR5L0	= 0	; Timer/Counter5 Input Capture Register Low Byte bit 0
                                 .equ	ICR5L1	= 1	; Timer/Counter5 Input Capture Register Low Byte bit 1
                                 .equ	ICR5L2	= 2	; Timer/Counter5 Input Capture Register Low Byte bit 2
                                 .equ	ICR5L3	= 3	; Timer/Counter5 Input Capture Register Low Byte bit 3
                                 .equ	ICR5L4	= 4	; Timer/Counter5 Input Capture Register Low Byte bit 4
                                 .equ	ICR5L5	= 5	; Timer/Counter5 Input Capture Register Low Byte bit 5
                                 .equ	ICR5L6	= 6	; Timer/Counter5 Input Capture Register Low Byte bit 6
                                 .equ	ICR5L7	= 7	; Timer/Counter5 Input Capture Register Low Byte bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_4 **************
                                 ; TIMSK4 - Timer/Counter4 Interrupt Mask Register
                                 .equ	TOIE4	= 0	; Timer/Counter4 Overflow Interrupt Enable
                                 .equ	OCIE4A	= 1	; Timer/Counter4 Output Compare A Match Interrupt Enable
                                 .equ	OCIE4B	= 2	; Timer/Counter4 Output Compare B Match Interrupt Enable
                                 .equ	OCIE4C	= 3	; Timer/Counter4 Output Compare C Match Interrupt Enable
                                 .equ	ICIE4	= 5	; Timer/Counter4 Input Capture Interrupt Enable
                                 
                                 ; TIFR4 - Timer/Counter4 Interrupt Flag register
                                 .equ	TOV4	= 0	; Timer/Counter4 Overflow Flag
                                 .equ	OCF4A	= 1	; Output Compare Flag 4A
                                 .equ	OCF4B	= 2	; Output Compare Flag 4B
                                 .equ	OCF4C	= 3	; Output Compare Flag 4C
                                 .equ	ICF4	= 5	; Input Capture Flag 4
                                 
                                 ; TCCR4A - Timer/Counter4 Control Register A
                                 .equ	WGM40	= 0	; Waveform Generation Mode
                                 .equ	WGM41	= 1	; Waveform Generation Mode
                                 .equ	COM4C0	= 2	; Compare Output Mode 4C, bit 0
                                 .equ	COM4C1	= 3	; Compare Output Mode 4C, bit 1
                                 .equ	COM4B0	= 4	; Compare Output Mode 4B, bit 0
                                 .equ	COM4B1	= 5	; Compare Output Mode 4B, bit 1
                                 .equ	COM4A0	= 6	; Compare Output Mode 4A, bit 0
                                 .equ	COM4A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR4B - Timer/Counter4 Control Register B
                                 .equ	CS40	= 0	; Prescaler source of Timer/Counter 4
                                 .equ	CS41	= 1	; Prescaler source of Timer/Counter 4
                                 .equ	CS42	= 2	; Prescaler source of Timer/Counter 4
                                 .equ	WGM42	= 3	; Waveform Generation Mode
                                 .equ	WGM43	= 4	; Waveform Generation Mode
                                 .equ	ICES4	= 6	; Input Capture 4 Edge Select
                                 .equ	ICNC4	= 7	; Input Capture 4 Noise Canceler
                                 
                                 ; TCCR4C - Timer/Counter 4 Control Register C
                                 .equ	FOC4C	= 5	; Force Output Compare 4C
                                 .equ	FOC4B	= 6	; Force Output Compare 4B
                                 .equ	FOC4A	= 7	; Force Output Compare 4A
                                 
                                 
                                 ; ***** TIMER_COUNTER_3 **************
                                 ; TIMSK3 - Timer/Counter3 Interrupt Mask Register
                                 .equ	TOIE3	= 0	; Timer/Counter3 Overflow Interrupt Enable
                                 .equ	OCIE3A	= 1	; Timer/Counter3 Output Compare A Match Interrupt Enable
                                 .equ	OCIE3B	= 2	; Timer/Counter3 Output Compare B Match Interrupt Enable
                                 .equ	OCIE3C	= 3	; Timer/Counter3 Output Compare C Match Interrupt Enable
                                 .equ	ICIE3	= 5	; Timer/Counter3 Input Capture Interrupt Enable
                                 
                                 ; TIFR3 - Timer/Counter3 Interrupt Flag register
                                 .equ	TOV3	= 0	; Timer/Counter3 Overflow Flag
                                 .equ	OCF3A	= 1	; Output Compare Flag 3A
                                 .equ	OCF3B	= 2	; Output Compare Flag 3B
                                 .equ	OCF3C	= 3	; Output Compare Flag 3C
                                 .equ	ICF3	= 5	; Input Capture Flag 3
                                 
                                 ; TCCR3A - Timer/Counter3 Control Register A
                                 .equ	WGM30	= 0	; Waveform Generation Mode
                                 .equ	WGM31	= 1	; Waveform Generation Mode
                                 .equ	COM3C0	= 2	; Compare Output Mode 3C, bit 0
                                 .equ	COM3C1	= 3	; Compare Output Mode 3C, bit 1
                                 .equ	COM3B0	= 4	; Compare Output Mode 3B, bit 0
                                 .equ	COM3B1	= 5	; Compare Output Mode 3B, bit 1
                                 .equ	COM3A0	= 6	; Compare Output Mode 3A, bit 0
                                 .equ	COM3A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR3B - Timer/Counter3 Control Register B
                                 .equ	CS30	= 0	; Prescaler source of Timer/Counter 3
                                 .equ	CS31	= 1	; Prescaler source of Timer/Counter 3
                                 .equ	CS32	= 2	; Prescaler source of Timer/Counter 3
                                 .equ	WGM32	= 3	; Waveform Generation Mode
                                 .equ	WGM33	= 4	; Waveform Generation Mode
                                 .equ	ICES3	= 6	; Input Capture 3 Edge Select
                                 .equ	ICNC3	= 7	; Input Capture 3 Noise Canceler
                                 
                                 ; TCCR3C - Timer/Counter 3 Control Register C
                                 .equ	FOC3C	= 5	; Force Output Compare 3C
                                 .equ	FOC3B	= 6	; Force Output Compare 3B
                                 .equ	FOC3A	= 7	; Force Output Compare 3A
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK1 - Timer/Counter1 Interrupt Mask Register
                                 .equ	TOIE1	= 0	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1A	= 1	; Timer/Counter1 Output Compare A Match Interrupt Enable
                                 .equ	OCIE1B	= 2	; Timer/Counter1 Output Compare B Match Interrupt Enable
                                 .equ	OCIE1C	= 3	; Timer/Counter1 Output Compare C Match Interrupt Enable
                                 .equ	ICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR1 - Timer/Counter1 Interrupt Flag register
                                 .equ	TOV1	= 0	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1A	= 1	; Output Compare Flag 1A
                                 .equ	OCF1B	= 2	; Output Compare Flag 1B
                                 .equ	OCF1C	= 3	; Output Compare Flag 1C
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	COM1C0	= 2	; Compare Output Mode 1C, bit 0
                                 .equ	COM1C1	= 3	; Compare Output Mode 1C, bit 1
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Compare Output Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 ; TCCR1C - Timer/Counter 1 Control Register C
                                 .equ	FOC1C	= 5	; Force Output Compare 1C
                                 .equ	FOC1B	= 6	; Force Output Compare 1B
                                 .equ	FOC1A	= 7	; Force Output Compare 1A
                                 
                                 
                                 ; ***** JTAG *************************
                                 ; OCDR - On-Chip Debug Related Register in I/O Memory
                                 .equ	OCDR0	= 0	; On-Chip Debug Register Bit 0
                                 .equ	OCDR1	= 1	; On-Chip Debug Register Bit 1
                                 .equ	OCDR2	= 2	; On-Chip Debug Register Bit 2
                                 .equ	OCDR3	= 3	; On-Chip Debug Register Bit 3
                                 .equ	OCDR4	= 4	; On-Chip Debug Register Bit 4
                                 .equ	OCDR5	= 5	; On-Chip Debug Register Bit 5
                                 .equ	OCDR6	= 6	; On-Chip Debug Register Bit 6
                                 .equ	OCDR7	= 7	; On-Chip Debug Register Bit 7
                                 .equ	IDRD	= OCDR7	; For compatibility
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	JTRF	= 4	; JTAG Reset Flag
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; EICRA - External Interrupt Control Register A
                                 .equ	ISC00	= 0	; External Interrupt Sense Control Bit
                                 .equ	ISC01	= 1	; External Interrupt Sense Control Bit
                                 .equ	ISC10	= 2	; External Interrupt Sense Control Bit
                                 .equ	ISC11	= 3	; External Interrupt Sense Control Bit
                                 .equ	ISC20	= 4	; External Interrupt Sense Control Bit
                                 .equ	ISC21	= 5	; External Interrupt Sense Control Bit
                                 .equ	ISC30	= 6	; External Interrupt Sense Control Bit
                                 .equ	ISC31	= 7	; External Interrupt Sense Control Bit
                                 
                                 ; EICRB - External Interrupt Control Register B
                                 .equ	ISC40	= 0	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC41	= 1	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC50	= 2	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC51	= 3	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC60	= 4	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC61	= 5	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC70	= 6	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC71	= 7	; External Interrupt 7-4 Sense Control Bit
                                 
                                 ; EIMSK - External Interrupt Mask Register
                                 .equ	INT0	= 0	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 1	; External Interrupt Request 1 Enable
                                 .equ	INT2	= 2	; External Interrupt Request 2 Enable
                                 .equ	INT3	= 3	; External Interrupt Request 3 Enable
                                 .equ	INT4	= 4	; External Interrupt Request 4 Enable
                                 .equ	INT5	= 5	; External Interrupt Request 5 Enable
                                 .equ	INT6	= 6	; External Interrupt Request 6 Enable
                                 .equ	INT7	= 7	; External Interrupt Request 7 Enable
                                 
                                 ; EIFR - External Interrupt Flag Register
                                 .equ	INTF0	= 0	; External Interrupt Flag 0
                                 .equ	INTF1	= 1	; External Interrupt Flag 1
                                 .equ	INTF2	= 2	; External Interrupt Flag 2
                                 .equ	INTF3	= 3	; External Interrupt Flag 3
                                 .equ	INTF4	= 4	; External Interrupt Flag 4
                                 .equ	INTF5	= 5	; External Interrupt Flag 5
                                 .equ	INTF6	= 6	; External Interrupt Flag 6
                                 .equ	INTF7	= 7	; External Interrupt Flag 7
                                 
                                 ; PCICR - Pin Change Interrupt Control Register
                                 .equ	PCIE0	= 0	; Pin Change Interrupt Enable 0
                                 .equ	PCIE1	= 1	; Pin Change Interrupt Enable 1
                                 .equ	PCIE2	= 2	; Pin Change Interrupt Enable 2
                                 
                                 ; PCIFR - Pin Change Interrupt Flag Register
                                 .equ	PCIF0	= 0	; Pin Change Interrupt Flag 0
                                 .equ	PCIF1	= 1	; Pin Change Interrupt Flag 1
                                 .equ	PCIF2	= 2	; Pin Change Interrupt Flag 2
                                 
                                 ; PCMSK2 - Pin Change Mask Register 2
                                 .equ	PCINT16	= 0	; Pin Change Enable Mask 16
                                 .equ	PCINT17	= 1	; Pin Change Enable Mask 17
                                 .equ	PCINT18	= 2	; Pin Change Enable Mask 18
                                 .equ	PCINT19	= 3	; Pin Change Enable Mask 19
                                 .equ	PCINT20	= 4	; Pin Change Enable Mask 20
                                 .equ	PCINT21	= 5	; Pin Change Enable Mask 21
                                 .equ	PCINT22	= 6	; Pin Change Enable Mask 22
                                 .equ	PCINT23	= 7	; Pin Change Enable Mask 23
                                 
                                 ; PCMSK1 - Pin Change Mask Register 1
                                 .equ	PCINT8	= 0	; Pin Change Enable Mask 8
                                 .equ	PCINT9	= 1	; Pin Change Enable Mask 9
                                 .equ	PCINT10	= 2	; Pin Change Enable Mask 10
                                 .equ	PCINT11	= 3	; Pin Change Enable Mask 11
                                 .equ	PCINT12	= 4	; Pin Change Enable Mask 12
                                 .equ	PCINT13	= 5	; Pin Change Enable Mask 13
                                 .equ	PCINT14	= 6	; Pin Change Enable Mask 14
                                 .equ	PCINT15	= 7	; Pin Change Enable Mask 15
                                 
                                 ; PCMSK0 - Pin Change Mask Register 0
                                 .equ	PCINT0	= 0	; Pin Change Enable Mask 0
                                 .equ	PCINT1	= 1	; Pin Change Enable Mask 1
                                 .equ	PCINT2	= 2	; Pin Change Enable Mask 2
                                 .equ	PCINT3	= 3	; Pin Change Enable Mask 3
                                 .equ	PCINT4	= 4	; Pin Change Enable Mask 4
                                 .equ	PCINT5	= 5	; Pin Change Enable Mask 5
                                 .equ	PCINT6	= 6	; Pin Change Enable Mask 6
                                 .equ	PCINT7	= 7	; Pin Change Enable Mask 7
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	IVCE	= 0	; Interrupt Vector Change Enable
                                 .equ	IVSEL	= 1	; Interrupt Vector Select
                                 .equ	PUD	= 4	; Pull-up disable
                                 ;.equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 ;.equ	JTRF	= 4	; JTAG Reset Flag
                                 
                                 ; XMCRA - External Memory Control Register A
                                 .equ	SRW00	= 0	; Wait state select bit lower page
                                 .equ	SRW01	= 1	; Wait state select bit lower page
                                 .equ	SRW10	= 2	; Wait state select bit upper page
                                 .equ	SRW11	= 3	; Wait state select bit upper page
                                 .equ	SRL0	= 4	; Wait state page limit
                                 .equ	SRL1	= 5	; Wait state page limit
                                 .equ	SRL2	= 6	; Wait state page limit
                                 .equ	SRE	= 7	; External SRAM Enable
                                 
                                 ; XMCRB - External Memory Control Register B
                                 .equ	XMM0	= 0	; External Memory High Mask
                                 .equ	XMM1	= 1	; External Memory High Mask
                                 .equ	XMM2	= 2	; External Memory High Mask
                                 .equ	XMBK	= 7	; External Memory Bus Keeper Enable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; CLKPR - 
                                 .equ	CLKPS0	= 0	; 
                                 .equ	CLKPS1	= 1	; 
                                 .equ	CLKPS2	= 2	; 
                                 .equ	CLKPS3	= 3	; 
                                 .equ	CLKPCE	= 7	; 
                                 
                                 ; SMCR - Sleep Mode Control Register
                                 .equ	SE	= 0	; Sleep Enable
                                 .equ	SM0	= 1	; Sleep Mode Select bit 0
                                 .equ	SM1	= 2	; Sleep Mode Select bit 1
                                 .equ	SM2	= 3	; Sleep Mode Select bit 2
                                 
                                 ; RAMPZ - RAM Page Z Select Register
                                 .equ	RAMPZ0	= 0	; RAM Page Z Select Register Bit 0
                                 .equ	RAMPZ1	= 1	; RAM Page Z Select Register Bit 1
                                 
                                 ; EIND - Extended Indirect Register
                                 .equ	EIND0	= 0	; Bit 0
                                 
                                 ; GPIOR2 - General Purpose IO Register 2
                                 .equ	GPIOR20	= 0	; General Purpose IO Register 2 bit 0
                                 .equ	GPIOR21	= 1	; General Purpose IO Register 2 bit 1
                                 .equ	GPIOR22	= 2	; General Purpose IO Register 2 bit 2
                                 .equ	GPIOR23	= 3	; General Purpose IO Register 2 bit 3
                                 .equ	GPIOR24	= 4	; General Purpose IO Register 2 bit 4
                                 .equ	GPIOR25	= 5	; General Purpose IO Register 2 bit 5
                                 .equ	GPIOR26	= 6	; General Purpose IO Register 2 bit 6
                                 .equ	GPIOR27	= 7	; General Purpose IO Register 2 bit 7
                                 
                                 ; GPIOR1 - General Purpose IO Register 1
                                 .equ	GPIOR10	= 0	; General Purpose IO Register 1 bit 0
                                 .equ	GPIOR11	= 1	; General Purpose IO Register 1 bit 1
                                 .equ	GPIOR12	= 2	; General Purpose IO Register 1 bit 2
                                 .equ	GPIOR13	= 3	; General Purpose IO Register 1 bit 3
                                 .equ	GPIOR14	= 4	; General Purpose IO Register 1 bit 4
                                 .equ	GPIOR15	= 5	; General Purpose IO Register 1 bit 5
                                 .equ	GPIOR16	= 6	; General Purpose IO Register 1 bit 6
                                 .equ	GPIOR17	= 7	; General Purpose IO Register 1 bit 7
                                 
                                 ; GPIOR0 - General Purpose IO Register 0
                                 .equ	GPIOR00	= 0	; General Purpose IO Register 0 bit 0
                                 .equ	GPIOR01	= 1	; General Purpose IO Register 0 bit 1
                                 .equ	GPIOR02	= 2	; General Purpose IO Register 0 bit 2
                                 .equ	GPIOR03	= 3	; General Purpose IO Register 0 bit 3
                                 .equ	GPIOR04	= 4	; General Purpose IO Register 0 bit 4
                                 .equ	GPIOR05	= 5	; General Purpose IO Register 0 bit 5
                                 .equ	GPIOR06	= 6	; General Purpose IO Register 0 bit 6
                                 .equ	GPIOR07	= 7	; General Purpose IO Register 0 bit 7
                                 
                                 ; PRR1 - Power Reduction Register1
                                 .equ	PRUSART1	= 0	; Power Reduction USART1
                                 .equ	PRUSART2	= 1	; Power Reduction USART2
                                 .equ	PRUSART3	= 2	; Power Reduction USART3
                                 .equ	PRTIM3	= 3	; Power Reduction Timer/Counter3
                                 .equ	PRTIM4	= 4	; Power Reduction Timer/Counter4
                                 .equ	PRTIM5	= 5	; Power Reduction Timer/Counter5
                                 
                                 ; PRR0 - Power Reduction Register0
                                 .equ	PRADC	= 0	; Power Reduction ADC
                                 .equ	PRUSART0	= 1	; Power Reduction USART
                                 .equ	PRSPI	= 2	; Power Reduction Serial Peripheral Interface
                                 .equ	PRTIM1	= 3	; Power Reduction Timer/Counter1
                                 .equ	PRTIM0	= 5	; Power Reduction Timer/Counter0
                                 .equ	PRTIM2	= 6	; Power Reduction Timer/Counter2
                                 .equ	PRTWI	= 7	; Power Reduction TWI
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	MUX4	= 4	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register A
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; ADC  Auto Trigger Enable
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCSRB - The ADC Control and Status register B
                                 .equ	ADTS0	= 0	; ADC Auto Trigger Source bit 0
                                 .equ	ADTS1	= 1	; ADC Auto Trigger Source bit 1
                                 .equ	ADTS2	= 2	; ADC Auto Trigger Source bit 2
                                 .equ	MUX5	= 3	; Analog Channel and Gain Selection Bits
                                 ;.equ	ACME	= 6	; 
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; DIDR0 - Digital Input Disable Register
                                 .equ	ADC0D	= 0	; 
                                 .equ	ADC1D	= 1	; 
                                 .equ	ADC2D	= 2	; 
                                 .equ	ADC3D	= 3	; 
                                 .equ	ADC4D	= 4	; 
                                 .equ	ADC5D	= 5	; 
                                 .equ	ADC6D	= 6	; 
                                 .equ	ADC7D	= 7	; 
                                 
                                 ; DIDR2 - Digital Input Disable Register
                                 .equ	ADC8D	= 0	; 
                                 .equ	ADC9D	= 1	; 
                                 .equ	ADC10D	= 2	; 
                                 .equ	ADC11D	= 3	; 
                                 .equ	ADC12D	= 4	; 
                                 .equ	ADC13D	= 5	; 
                                 .equ	ADC14D	= 6	; 
                                 .equ	ADC15D	= 7	; 
                                 
                                 
                                 ; ***** BOOT_LOAD ********************
                                 ; SPMCSR - Store Program Memory Control Register
                                 .equ	SPMEN	= 0	; Store Program Memory Enable
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read While Write section read enable
                                 .equ	SIGRD	= 5	; Signature Row Read
                                 .equ	RWWSB	= 6	; Read While Write Section Busy
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 
                                 ; ***** USART2 ***********************
                                 ; UDR2 - USART I/O Data Register
                                 .equ	UDR2_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR2_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR2_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR2_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR2_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR2_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR2_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR2_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR2A - USART Control and Status Register A
                                 .equ	MPCM2	= 0	; Multi-processor Communication Mode
                                 .equ	U2X2	= 1	; Double the USART transmission speed
                                 .equ	UPE2	= 2	; Parity Error
                                 .equ	DOR2	= 3	; Data overRun
                                 .equ	FE2	= 4	; Framing Error
                                 .equ	UDRE2	= 5	; USART Data Register Empty
                                 .equ	TXC2	= 6	; USART Transmitt Complete
                                 .equ	RXC2	= 7	; USART Receive Complete
                                 
                                 ; UCSR2B - USART Control and Status Register B
                                 .equ	TXB82	= 0	; Transmit Data Bit 8
                                 .equ	RXB82	= 1	; Receive Data Bit 8
                                 .equ	UCSZ22	= 2	; Character Size
                                 .equ	TXEN2	= 3	; Transmitter Enable
                                 .equ	RXEN2	= 4	; Receiver Enable
                                 .equ	UDRIE2	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE2	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE2	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR2C - USART Control and Status Register C
                                 .equ	UCPOL2	= 0	; Clock Polarity
                                 .equ	UCSZ20	= 1	; Character Size
                                 .equ	UCSZ21	= 2	; Character Size
                                 .equ	USBS2	= 3	; Stop Bit Select
                                 .equ	UPM20	= 4	; Parity Mode Bit 0
                                 .equ	UPM21	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL20	= 6	; USART Mode Select
                                 .equ	UMSEL21	= 7	; USART Mode Select
                                 
                                 ; UBRR2H - USART Baud Rate Register High Byte
                                 ;.equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 ;.equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 ;.equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 ;.equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR2L - USART Baud Rate Register Low Byte
                                 .equ	UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	UBRR1	= 1	; USART Baud Rate Register bit 1
                                 ;.equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 ;.equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 ;.equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 ;.equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 ;.equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 ;.equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** USART3 ***********************
                                 ; UDR3 - USART I/O Data Register
                                 .equ	UDR3_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR3_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR3_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR3_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR3_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR3_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR3_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR3_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR3A - USART Control and Status Register A
                                 .equ	MPCM3	= 0	; Multi-processor Communication Mode
                                 .equ	U2X3	= 1	; Double the USART transmission speed
                                 .equ	UPE3	= 2	; Parity Error
                                 .equ	DOR3	= 3	; Data overRun
                                 .equ	FE3	= 4	; Framing Error
                                 .equ	UDRE3	= 5	; USART Data Register Empty
                                 .equ	TXC3	= 6	; USART Transmitt Complete
                                 .equ	RXC3	= 7	; USART Receive Complete
                                 
                                 ; UCSR3B - USART Control and Status Register B
                                 .equ	TXB83	= 0	; Transmit Data Bit 8
                                 .equ	RXB83	= 1	; Receive Data Bit 8
                                 .equ	UCSZ32	= 2	; Character Size
                                 .equ	TXEN3	= 3	; Transmitter Enable
                                 .equ	RXEN3	= 4	; Receiver Enable
                                 .equ	UDRIE3	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE3	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE3	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR3C - USART Control and Status Register C
                                 .equ	UCPOL3	= 0	; Clock Polarity
                                 .equ	UCSZ30	= 1	; Character Size
                                 .equ	UCSZ31	= 2	; Character Size
                                 .equ	USBS3	= 3	; Stop Bit Select
                                 .equ	UPM30	= 4	; Parity Mode Bit 0
                                 .equ	UPM31	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL30	= 6	; USART Mode Select
                                 .equ	UMSEL31	= 7	; USART Mode Select
                                 
                                 ; UBRR3H - USART Baud Rate Register High Byte
                                 ;.equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 ;.equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 ;.equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 ;.equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR3L - USART Baud Rate Register Low Byte
                                 ;.equ	UBRR0	= 0	; USART Baud Rate Register bit 0
                                 ;.equ	UBRR1	= 1	; USART Baud Rate Register bit 1
                                 ;.equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 ;.equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 ;.equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 ;.equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 ;.equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 ;.equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	CKOUT	= 6	; Clock output
                                 .equ	CKDIV8	= 7	; Divide clock by 8
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select Reset Vector
                                 .equ	BOOTSZ0	= 1	; Select Boot Size
                                 .equ	BOOTSZ1	= 2	; Select Boot Size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	WDTON	= 4	; Watchdog timer always on
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	JTAGEN	= 6	; Enable JTAG
                                 .equ	OCDEN	= 7	; Enable OCD
                                 
                                 ; EXTENDED fuse bits
                                 .equ	BODLEVEL0	= 0	; Brown-out Detector trigger level
                                 .equ	BODLEVEL1	= 1	; Brown-out Detector trigger level
                                 .equ	BODLEVEL2	= 2	; Brown-out Detector trigger level
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x1ffff	; Note: Word address
                                 .equ	IOEND	= 0x01ff
                                 .equ	SRAM_START	= 0x0200
                                 .equ	SRAM_SIZE	= 8192
                                 .equ	RAMEND	= 0x21ff
                                 .equ	XRAMEND	= 0xffff
                                 .equ	E2END	= 0x0fff
                                 .equ	EEPROMEND	= 0x0fff
                                 .equ	EEADRBITS	= 12
                                 #pragma AVRPART MEMORY PROG_FLASH 262144
                                 #pragma AVRPART MEMORY EEPROM 4096
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 8192
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x200
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x1f000
                                 .equ	NRWW_STOP_ADDR	= 0x1ffff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x1efff
                                 .equ	PAGESIZE	= 128
                                 .equ	FIRSTBOOTSTART	= 0x1fe00
                                 .equ	SECONDBOOTSTART	= 0x1fc00
                                 .equ	THIRDBOOTSTART	= 0x1f800
                                 .equ	FOURTHBOOTSTART	= 0x1f000
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	INT2addr	= 0x0006	; External Interrupt Request 2
                                 .equ	INT3addr	= 0x0008	; External Interrupt Request 3
                                 .equ	INT4addr	= 0x000a	; External Interrupt Request 4
                                 .equ	INT5addr	= 0x000c	; External Interrupt Request 5
                                 .equ	INT6addr	= 0x000e	; External Interrupt Request 6
                                 .equ	INT7addr	= 0x0010	; External Interrupt Request 7
                                 .equ	PCI0addr	= 0x0012	; Pin Change Interrupt Request 0
                                 .equ	PCI1addr	= 0x0014	; Pin Change Interrupt Request 1
                                 .equ	PCI2addr	= 0x0016	; Pin Change Interrupt Request 2
                                 .equ	WDTaddr	= 0x0018	; Watchdog Time-out Interrupt
                                 .equ	OC2Aaddr	= 0x001a	; Timer/Counter2 Compare Match A
                                 .equ	OC2Baddr	= 0x001c	; Timer/Counter2 Compare Match B
                                 .equ	OVF2addr	= 0x001e	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x0020	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x0022	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x0024	; Timer/Counter1 Compare Match B
                                 .equ	OC1Caddr	= 0x0026	; Timer/Counter1 Compare Match C
                                 .equ	OVF1addr	= 0x0028	; Timer/Counter1 Overflow
                                 .equ	OC0Aaddr	= 0x002a	; Timer/Counter0 Compare Match A
                                 .equ	OC0Baddr	= 0x002c	; Timer/Counter0 Compare Match B
                                 .equ	OVF0addr	= 0x002e	; Timer/Counter0 Overflow
                                 .equ	SPIaddr	= 0x0030	; SPI Serial Transfer Complete
                                 .equ	URXC0addr	= 0x0032	; USART0, Rx Complete
                                 .equ	UDRE0addr	= 0x0034	; USART0 Data register Empty
                                 .equ	UTXC0addr	= 0x0036	; USART0, Tx Complete
                                 .equ	ACIaddr	= 0x0038	; Analog Comparator
                                 .equ	ADCCaddr	= 0x003a	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x003c	; EEPROM Ready
                                 .equ	ICP3addr	= 0x003e	; Timer/Counter3 Capture Event
                                 .equ	OC3Aaddr	= 0x0040	; Timer/Counter3 Compare Match A
                                 .equ	OC3Baddr	= 0x0042	; Timer/Counter3 Compare Match B
                                 .equ	OC3Caddr	= 0x0044	; Timer/Counter3 Compare Match C
                                 .equ	OVF3addr	= 0x0046	; Timer/Counter3 Overflow
                                 .equ	URXC1addr	= 0x0048	; USART1, Rx Complete
                                 .equ	UDRE1addr	= 0x004a	; USART1 Data register Empty
                                 .equ	UTXC1addr	= 0x004c	; USART1, Tx Complete
                                 .equ	TWIaddr	= 0x004e	; 2-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0050	; Store Program Memory Read
                                 .equ	ICP4addr	= 0x0052	; Timer/Counter4 Capture Event
                                 .equ	OC4Aaddr	= 0x0054	; Timer/Counter4 Compare Match A
                                 .equ	OC4Baddr	= 0x0056	; Timer/Counter4 Compare Match B
                                 .equ	OC4Caddr	= 0x0058	; Timer/Counter4 Compare Match C
                                 .equ	OVF4addr	= 0x005a	; Timer/Counter4 Overflow
                                 .equ	ICP5addr	= 0x005c	; Timer/Counter5 Capture Event
                                 .equ	OC5Aaddr	= 0x005e	; Timer/Counter5 Compare Match A
                                 .equ	OC5Baddr	= 0x0060	; Timer/Counter5 Compare Match B
                                 .equ	OC5Caddr	= 0x0062	; Timer/Counter5 Compare Match C
                                 .equ	OVF5addr	= 0x0064	; Timer/Counter5 Overflow
                                 .equ	URXC2addr	= 0x0066	; USART2, Rx Complete
                                 .equ	UDRE2addr	= 0x0068	; USART2 Data register Empty
                                 .equ	UTXC2addr	= 0x006a	; USART2, Tx Complete
                                 .equ	URXC3addr	= 0x006c	; USART3, Rx Complete
                                 .equ	UDRE3addr	= 0x006e	; USART3 Data register Empty
                                 .equ	UTXC3addr	= 0x0070	; USART3, Tx Complete
                                 
                                 .equ	INT_VECTORS_SIZE	= 114	; size in words
                                 
                                 #endif  /* _M2560DEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 ; Author : Benjamin Cheung (z3460693) and Christopher Crowe (z)
                                 .include "m2560def.inc"
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega2560.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m2560def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega2560
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega2560
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M2560DEF_INC_
                                 #endif  /* _M2560DEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 .include "init.asm" ; def, equ, LCD setting, macro and data segment 
                                 
                                 .def outp =r16
                                 .def row =r17
                                 .def col =r18
                                 .def mask =r19
                                 .def temp2 =r20
                                 ; General
                                 .def temp=r21
                                 .def temp1 = r22
                                 .def temp3 = r23
                                 .def numberL=r24
                                 .def numberH = r25
                                 ; Keypad Variables
                                 .equ PORTLDIR = 0xF0
                                 .equ INITCOLMASK = 0xEF
                                 .equ INITROWMASK = 0x01
                                 .equ ROWMASK = 0x0F
                                 ; LCD Settings
                                 .set LCD_DISP_ON = 0b00001110
                                 .set LCD_DISP_OFF = 0b00001000
                                 .set LCD_DISP_CLR = 0b00000001
                                 .set LCD_FUNC_SET = 0b00111000 		; 2 lines, 5 by 7 characters
                                 .set LCD_ENTR_SET = 0b00000110 		; increment, no display shift
                                 .set LCD_HOME_LINE = 0b10000000 	; goes to 1st line (address 0)
                                 .set LCD_SEC_LINE = 0b10101000 		; goes to 2nd line (address 40)
                                 ; LCD Macros
                                 .macro do_lcd_command
                                 	ldi r16, @0
                                 	rcall lcd_command
                                 	rcall lcd_wait
                                 .endmacro
                                 .macro do_lcd_command_reg
                                 	mov r16, @0
                                 	rcall lcd_command
                                 	rcall lcd_wait
                                 .endmacro
                                 .macro do_lcd_data
                                 	ldi r16, @0
                                 	rcall lcd_data
                                 	rcall lcd_wait
                                 .endmacro
                                 .macro do_lcd_data_reg
                                 	mov r16, @0
                                 	rcall lcd_data
                                 	rcall lcd_wait
                                 .endmacro
                                 .macro lcd_set
                                 	sbi PORTA, @0
                                 .endmacro
                                 .macro lcd_clr
                                 	cbi PORTA, @0
                                 .endmacro
                                 .macro clearTempCounter ; The macro clears a word (2 bytes) in the data memory The parameter @0 is the memory address for that word
                                 	ldi YL, low(@0) ; load the memory address to Y pointer
                                 	ldi YH, high(@0)
                                 	clr temp ; set temp to 0
                                 	st Y+, temp ; clear the two bytes at @0 in SRAM
                                 	st Y, temp
                                 .endmacro
                                 
                                 .dseg
                                 .org 0x200
                                 	;Designate space for variables and data
000200                           	SecondCounter: .byte 2
000202                           	TempCounter: .byte 2
000204                           	button_flag: .byte 1
000205                           	num_stations: .byte 1
000206                           	station_names: .byte 100
00026a                           	time_travel: .byte 10
000274                           	time_stop: .byte 1
000275                           	tourist_on: .byte 1
000276                           	tourist_off: .byte 1
000277                           	tourist_count: .byte 1
000278                           	currRPS: .byte 1
000279                           	holes: .byte 1
00027a                           	targetRPS: .byte 1
00027b                           	next_station: .byte 1
00027c                           	monorail_stop_move: .byte 1
00027d                           	thirdofsecond_passed: .byte 1
00027e                           	seconds_passed: .byte 1
00027f                           	currtime_to_nextstation: .byte 1
000280                           	order_to_stop: .byte 1
                                 
                                 
                                 
                                 .cseg
                                 .org 0x0000
000000 940c 0073                 	jmp RESET
000002 940c 011f                 	jmp RIGHT_BUTTON		; IRQ0 Handler PB0 RDX4
000004 940c 0130                 	jmp LEFT_BUTTON			; IRQ1 Handler PB1 RDX3
000006 940c 0151                 	jmp INTERRUPT2 			; IRQ2 Handler
000008 940c 0072                 	jmp DEFAULT 			; IRQ3 Handler
00000a 940c 0072                 	jmp DEFAULT 			; IRQ4 Handler
00000c 940c 0072                 	jmp DEFAULT 			; IRQ5 Handler
00000e 940c 0072                 	jmp DEFAULT 			; IRQ6 Handler
000010 940c 0072                 	jmp DEFAULT 			; IRQ7 Handler
000012 940c 0072                 	jmp DEFAULT 			; Pin Change Interrupt Request 0
000014 940c 0072                 	jmp DEFAULT 			; Pin Change Interrupt Request 1
000016 940c 0072                 	jmp DEFAULT 			; Pin Change Interrupt Request 2
000018 940c 0072                 	jmp DEFAULT 			; Watchdog Time-out Interrupt
00001a 940c 0072                 	jmp DEFAULT 			; Timer/Counter2 Compare Match A
00001c 940c 0072                 	jmp DEFAULT 			; Timer/Counter2 Compare Match B
00001e 940c 0072                 	jmp DEFAULT 			; Timer/Counter2 Overflow
000020 940c 0072                 	jmp DEFAULT 			; Timer/Counter1 Capture Event
000022 940c 0072                 	jmp DEFAULT 			; Timer/Counter1 Compare Match A
000024 940c 0072                 	jmp DEFAULT 			; Timer/Counter1 Compare Match B
000026 940c 0072                 	jmp DEFAULT 			; Timer/Counter1 Compare Match C
000028 940c 0145                 	jmp BUTTON_CLR 			; Timer/Counter1 Overflow
00002a 940c 0072                 	jmp DEFAULT 			; Timer/Counter0 Compare Match A
00002c 940c 0072                 	jmp DEFAULT 			; Timer/Counter0 Compare Match B
00002e 940c 00c5                 	jmp Timer0OVF 			; Timer/Counter0 Overflow
000030 940c 0072                 	jmp DEFAULT 			; SPI Serial Transfer Complete
000032 940c 0072                 	jmp DEFAULT 			; USART0, Rx Complete
000034 940c 0072                 	jmp DEFAULT 			; USART0 Data register Empty
000036 940c 0072                 	jmp DEFAULT 			; USART0, Tx Complete
000038 940c 0072                 	jmp DEFAULT 			; Analog Comparator
00003a 940c 0072                 	jmp DEFAULT 			; ADC Conversion Complete
00003c 940c 0072                 	jmp DEFAULT 			; EEPROM Ready
00003e 940c 0072                 	jmp DEFAULT 			; Timer/Counter3 Capture Event
000040 940c 0072                 	jmp DEFAULT 			; Timer/Counter3 Compare Match A
000042 940c 0072                 	jmp DEFAULT 			; Timer/Counter3 Compare Match B
000044 940c 0072                 	jmp DEFAULT 			; Timer/Counter3 Compare Match C
000046 940c 0072                 	jmp DEFAULT 			; Timer/Counter3 Overflow
                                 .org 0x0072
                                 DEFAULT: ; used for interrupts that are not handled
000072 9518                      	reti 
                                 
                                 RESET:
000073 ef0f                      	ldi r16, low(RAMEND) ; Initialise SP
000074 bf0d                      	out SPL, r16
000075 e201                      	ldi r16, high(RAMEND)
000076 bf0e                      	out SPH, r16
                                 	
000077 ef6f                      	ser temp1 ; set PORTC (LEDs) to output
000078 b967                      	out DDRC, temp1
                                 	
000079 ef0f                      	ser r16 ; LCD SETUP										
00007a bb00                      	out DDRF, r16
00007b b901                      	out DDRA, r16
00007c 2700                      	clr r16	; clear PORTF and PORTA registers
00007d bb01                      	out PORTF, r16
00007e b902                      	out PORTA, r16
                                 	
                                 	; Hole count porting
00007f 2700                      	clr r16 ; set PORTD (INT2/TDX2) to input - Timer0
000080 b90a                      	out DDRD, r16 		
                                 	
000081 e260                      	ldi temp1, (2 << ISC20) 	; set INT2 to trigger on falling edges
000082 9360 0069                 	sts EICRA, temp1
000084 e064                      	ldi temp1, (1 << INT2) 		; enable INT2 to count holes
000085 bb6d                      	out EIMSK, temp1
                                 
                                 	; Initialisation
000086 d105                      	rcall initialise_LCD
000087 d0d1                      	rcall initialise_LED
000088 d0df                      	rcall initialise_buttons
000089 d48f                      	rcall initialise_keypad
                                 	
00008a 9478                      	sei ; Enable global interrupts
                                 
                                 	; Initialise VAR
00008b e35c                      	ldi temp, 60
00008c 9350 027a                 	sts targetRPS, temp
00008e e051                      	ldi temp, 1
00008f 9350 027c                 	sts monorail_stop_move, temp ; Initially moving
000091 e051                      	ldi temp, 1
000092 9350 027b                 	sts next_station, temp ; Initially going towards station 2
000094 2755                      	clr temp
000095 9350 0275                 	sts tourist_on, temp
000097 9350 0276                 	sts tourist_off, temp
000099 9350 0277                 	sts tourist_count, temp
00009b 9350 027d                 	sts thirdofsecond_passed, temp
00009d 9350 027e                 	sts seconds_passed, temp
00009f 9350 0280                 	sts order_to_stop, temp ; INTIALLY NO ORDERS
                                 
                                 system_configurations: ; CALLS FUNCTIONS FOR SYSTEM CONFIG
0000a1 d4de                      	rcall read_station_number
0000a2 9300 0205                 	sts num_stations, outp 
0000a4 d223                      	rcall print_numstation
0000a5 d507                      	rcall read_station_names
0000a6 d541                      	rcall read_travel_times
0000a7 d5d3                      	rcall read_stop_time
0000a8 d2af                      	rcall print_finish
0000a9 d6f1                      	rcall demo_test
                                 
                                 monorail_emulation:	
0000aa e6ca                      	ldi yl, low(time_travel)
0000ab e0d2                      	ldi yh, high(time_travel)
0000ac 8158                      	ld temp, y
0000ad 9350 027f                 	sts currtime_to_nextstation, temp
                                 
0000af d5fc                      	rcall initialise_timer
0000b0 d44d                      	rcall initialise_motor
                                 halt: 
0000b1 d46e                      	rcall keypad_scan
0000b2 3203                      	cpi outp, '#'
0000b3 f009                      	breq check_moving
0000b4 cffc                      	rjmp halt
                                 check_moving:
0000b5 9150 027c                 	lds temp, monorail_stop_move
0000b7 3051                      	cpi temp, 1 ; 1 MEANS MOVING SO CAN ORDER TO STOP
0000b8 f021                      	breq monorail_immediate_stop
0000b9 3052                      	cpi temp, 2 ; 2 MEANS STOPPED BETWEEN
0000ba f031                      	breq monorail_immediate_stop_restart
0000bb 940c 00b1                 	jmp halt
                                 monorail_immediate_stop: ; STOPPING BETWEEN
0000bd e051                      	ldi temp, 1
0000be 9350 0280                 	sts order_to_stop, temp ; 1 MEANS STOP ORDER
0000c0 cff0                      	rjmp halt
                                 monorail_immediate_stop_restart:
0000c1 e052                      	ldi temp, 2
0000c2 9350 0280                 	sts order_to_stop, temp ; 2 MEANS NO STOP ORDER ANYMORE - MOVE ORDER
0000c4 cfec                      	rjmp halt
                                 
                                 ; Timer + Motor stuff
                                 Timer0OVF: ; interrupt subroutine to Timer0
0000c5 b75f                      	in temp, SREG
0000c6 935f                      	push temp ; prologue starts
0000c7 936f                      	push temp1
0000c8 93df                      	push YH ; save all conflicting registers in the prologue
0000c9 93cf                      	push YL
0000ca 939f                      	push r25
0000cb 938f                      	push r24 ; prologue ends
0000cc d08c                      	rcall initialise_LED
0000cd 9180 0202                 	lds r24, TempCounter ; Load the value of the temporary counter
0000cf 9190 0203                 	lds r25, TempCounter+1
0000d1 9601                      	adiw r25:r24, 1 ; increase the temporary counter
                                 	; 1 Second = 7812 = 10^6/128 - 2604 every 1/3 seconds
0000d2 328c                      	cpi r24, low(2604) 
0000d3 e05a                      	ldi temp, high(2604)
0000d4 0795                      	cpc r25, temp
0000d5 f5e9                      	brne NotSecond
0000d6 e0c2
0000d7 e0d2
0000d8 2755
0000d9 9359
0000da 8358                      	clearTempCounter TempCounter ; one second has passed, thus reset the temporary counter
0000db 9180 0200                 	lds r24, SecondCounter ; Load the value of the second counter
0000dd 9583                      	inc r24 ; increase the second counter by one
                                 
                                 	; DO STUFF 1/3 SECOND HAS PASSED - UPDATE STATIONS
0000de d5de                      	rcall increment_secondpassed
0000df d5ec                      	rcall check_order_stop
0000e0 d635                      	rcall stop_station
0000e1 d650                      	rcall update_station
                                 	
                                 	; LED BLINK IF STOP
0000e2 9170 027a                 	lds temp3, targetRPS ; TEMP3 = TARGET
0000e4 3070                      	cpi temp3, 0
0000e5 f119                      	breq LED_BLINK
                                 
                                 	; MEASURE RPS FOR MOTOR
0000e6 d42a                      	rcall measure_RPS	
                                 
                                 	; CHANGE SPEED FOR MOTOR
0000e7 9160 0278                 	lds temp1, currRPS ; RPS < Target
0000e9 2f57                      	mov temp, temp3 
0000ea 1b56                      	sub temp, temp1 ; TEMP = TARGET - RPS (DIFFERENCE)
0000eb 1767                      	cp temp1, temp3 ; RPS VS TARGET
0000ec f028                      	brlo increase_voltage
                                 	;  RPS >= TARGET
0000ed 1b67                      	sub temp1, temp3 ; TEMP1 = RPS - TARGET (DIFFERENCE)
0000ee 3060                      	cpi temp1, 0
0000ef f0d1                      	breq print_target ; PRINT TARGET IF NO DIFFERENCE
0000f0 940c 00ff                 	jmp decrease_voltage ; otherwise decrease voltage
                                 increase_voltage: ; RPS < TARGET_RPS SO INCREASE OCR3A by RPS_UPDATE
0000f2 9160 0098                 	lds temp1, OCR3AL
0000f4 9140 0099                 	lds temp2, OCR3AH
0000f6 0f65                      	add temp1, temp
0000f7 2777                      	clr temp3
0000f8 1f47                      	adc temp2, temp3
0000f9 9340 0099                 	sts OCR3AH, temp2
0000fb 9360 0098                 	sts OCR3AL, temp1
0000fd 940c 010a                 	jmp print_target
                                 decrease_voltage: ; RPS > TARGET RPS SO DECREASE OCR3A BY UPDATE
0000ff 9150 0098                 	lds temp, OCR3AL
000101 1b56                      	sub temp, temp1
000102 9140 0099                 	lds temp2, OCR3AH
000104 4040                      	sbci temp2, 0
000105 9340 0099                 	sts OCR3AH, temp2
000107 9350 0098                 	sts OCR3AL, temp
                                 LED_BLINK: ; TARGET RPS 0
000109 d054                      	rcall on_LED
                                 print_target: ; CALL LCD FUNCTION TO PRINT DISPLAY
00010a d31f                      	rcall emulator_LCD_display
00010b 2755                      	clr temp
00010c 9350 0278                 	sts currRPS, temp ; CLEAR CURR RPS
00010e 9350 0279                 	sts holes, temp
000110 9380 0200                 	sts SecondCounter, r24 ;store the second counter in the data memory
000112 c004                      	rjmp EndIF			
                                 NotSecond: ; store the new value of the temporary counter
000113 9380 0202                 	sts TempCounter, r24
000115 9390 0203                 	sts TempCounter+1, r25
                                 EndIF: ; epilogue 
000117 918f                      	pop r24 
000118 919f                      	pop r25 ; restore all conflicting registers from the stack
000119 91cf                      	pop YL
00011a 91df                      	pop YH
00011b 916f                      	pop temp1
00011c 915f                      	pop temp
00011d bf5f                      	out SREG, temp
00011e 9518                      	reti ; return from the interrupt
                                 
                                 ; FOR PB0/PB1
                                 RIGHT_BUTTON: ;PB0
00011f 936f                      	push temp1 ; Prologue
000120 9160 0204                 	lds temp1, button_flag ; Debounce
000122 3061                      	cpi temp1, 1 ; If button flag, 1 already pressed
000123 f049                      	breq RIGHT_BUTTON_EPILOGUE 
                                 	; Do STUFF - Increase tourist off
000124 d059                      	rcall increase_tourist_off
000125 940c 0127                 	jmp RIGHT_BUTTON_Flag
                                 RIGHT_BUTTON_Flag:
000127 e061                      	ldi temp1, 1
000128 9360 0204                 	sts button_flag, temp1 ; Set button_flag as 1 (pressed)
00012a e061                      	ldi temp1, 1 << TOIE1 	; enable timer interrupt again
00012b 9360 006f                 	sts TIMSK1, temp1
                                 RIGHT_BUTTON_EPILOGUE:
00012d d3b8                      	rcall sleep_20ms
00012e 916f                      	pop temp1
00012f 9518                      	reti
                                 LEFT_BUTTON: ;PB1
000130 936f                      	push temp1 ; Prologue
000131 9160 0204                 	lds temp1, button_flag ; Debounce
000133 3061                      	cpi temp1, 1 ; If button flag, 1 already pressed
000134 f069                      	breq LEFT_BUTTON_EPILOGUE
                                 	; DO STUFF - Increase tourist on
000135 9160 0275                 	lds temp1, tourist_on
000137 9563                      	inc temp1
000138 9360 0275                 	sts tourist_on, temp1
00013a 940c 013c                 	jmp LEFT_BUTTON_FLAG
                                 LEFT_BUTTON_Flag:
00013c e061                      	ldi temp1, 1
00013d 9360 0204                 	sts button_flag, temp1
00013f e061                      	ldi temp1, 1 << TOIE1 	; enable timer interrupt again
000140 9360 006f                 	sts TIMSK1, temp1
                                 LEFT_BUTTON_EPILOGUE:
000142 d3a3                      	rcall sleep_20ms
000143 916f                      	pop temp1
000144 9518                      	reti
                                 BUTTON_CLR:
000145 936f                      	push temp1 ; Prologue
000146 9478                      	sei ; Enable global interrupt
000147 d38f                      	rcall sleep_1ms
000148 94f8                      	cli ; Global interrupt disable
000149 2766                      	clr temp1 ; set button flag to 0		
00014a 9360 0204                 	sts button_flag, temp1 
00014c e060                      	ldi temp1, 0 << TOIE1 	; disable timer
00014d 9360 006f                 	sts TIMSK1, temp1
                                 BUTTON_CLR_EPILOGUE:
00014f 916f                      	pop temp1
000150 9518                      	reti
                                 
                                 INTERRUPT2: ; COUNT HOLE, interrupt is trigged
000151 936f                      	push temp1 ; Prologue
                                 	; DO STUFF
000152 9160 0279                 	lds temp1, holes
000154 9563                      	inc temp1
000155 9360 0279                 	sts holes, temp1
                                 INTERRUPT2_EPILOGUE:
000157 916f                      	pop temp1
000158 9518                      	reti
                                 
                                 ; These files contain helper functions as well as some definitions
                                 .include "led.asm"
                                 
000159 936f                      	push temp1
00015a 2766                      	clr temp1
00015b b968                      	out PORTC, temp1
00015c 916f                      	pop temp1
00015d 9508                      	ret
                                 
                                 on_LED:
00015e 936f                      	push temp1
00015f ef6f                      	ser temp1
000160 b968                      	out PORTC, temp1
000161 2766                      	clr temp1
000162 9350 0099                 	sts OCR3AH, temp
000164 9350 0098                 	sts OCR3AL, temp
000166 916f                      	pop temp1
000167 9508                      	ret
                                 .include "buttons.asm"
                                 
000168 936f                      	push temp1 ; Prolouge 
                                 
000169 2766                      	clr temp1
00016a 9360 0204                 	sts button_flag, temp1 ; Clear debounce flag
                                 
00016c 9160 0069                 	lds temp1, EICRA
00016e 6062                      	ori temp1, (2 << ISC00)		; set INT0 to trigger on falling edges
00016f 6068                      	ori temp1, (2 << ISC10) 	; set INT1 to trigger on falling edges
000170 9360 0069                 	sts EICRA, temp1
                                 
000172 b36d                      	in temp1, EIMSK
000173 6061                      	ori temp1, (1 << INT0) 		; enable INT0
000174 6062                      	ori temp1, (1 << INT1) 		; enable INT1
000175 bb6d                      	out EIMSK, temp1
                                 
                                 	; button flag timer settings
000176 2766                      	clr temp1 				; normal mode
000177 9360 0080                 	sts TCCR1A, temp1
000179 e064                      	ldi temp1, (1 << CS12)	; set prescaler to 256
00017a 9360 0081                 	sts TCCR1B, temp1
                                 
00017c 916f                      	pop temp1 ; Epilouge
00017d 9508                      	ret
                                 
                                 increase_tourist_off:
00017e 935f                      	push temp ; prolouge
00017f 936f                      	push temp1
000180 9150 0277                 	lds temp, tourist_count
000182 9160 0276                 	lds temp1, tourist_off
000184 1756                      	cp temp, temp1 ; IF THEY ARE THE SAME CANT INCREASE ANYMORE
000185 f019                      	breq increase_tourist_off_epilogue 
000186 9563                      	inc temp1 ; OTHERWISE INCREASE AND STORE
000187 9360 0276                 	sts tourist_off, temp1
                                 increase_tourist_off_epilogue:
000189 916f                      	pop temp1
00018a 915f                      	pop temp
00018b 9508                      	ret
                                 .include "lcd.asm"
                                 
                                 ; LCD Functions
                                 initialise_LCD: 		; used to initialise LCD and related variables
00018c e308
00018d d328
00018e d337                      	do_lcd_command LCD_FUNC_SET 
00018f d350                      	rcall sleep_5ms
000190 e308
000191 d324
000192 d333                      	do_lcd_command LCD_FUNC_SET
000193 d343                      	rcall sleep_1ms
000194 e308
000195 d320
000196 d32f                      	do_lcd_command LCD_FUNC_SET
000197 e308
000198 d31d
000199 d32c                      	do_lcd_command LCD_FUNC_SET
00019a e008
00019b d31a
00019c d329                      	do_lcd_command LCD_DISP_OFF
00019d e001
00019e d317
00019f d326                      	do_lcd_command LCD_DISP_CLR
0001a0 e006
0001a1 d314
0001a2 d323                      	do_lcd_command LCD_ENTR_SET
0001a3 e00e
0001a4 d311
0001a5 d320                      	do_lcd_command LCD_DISP_ON
0001a6 9508                      	ret
                                 
                                 ; OUTPUT FOR SYSTEM CONFIGURATION
                                 lcd_output_one: ; "Type the max num(new line)of stations: "
0001a7 e504
0001a8 d314
0001a9 d31c                      	do_lcd_data 'T'
0001aa e709
0001ab d311
0001ac d319                      	do_lcd_data 'y'
0001ad e700
0001ae d30e
0001af d316                      	do_lcd_data 'p'
0001b0 e605
0001b1 d30b
0001b2 d313                      	do_lcd_data 'e' ;4
0001b3 e200
0001b4 d308
0001b5 d310                      	do_lcd_data ' '
0001b6 e704
0001b7 d305
0001b8 d30d                      	do_lcd_data 't'
0001b9 e608
0001ba d302
0001bb d30a                      	do_lcd_data 'h'
0001bc e605
0001bd d2ff
0001be d307                      	do_lcd_data 'e' ;4
0001bf e200
0001c0 d2fc
0001c1 d304                      	do_lcd_data ' '
0001c2 e60d
0001c3 d2f9
0001c4 d301                      	do_lcd_data 'm'
0001c5 e601
0001c6 d2f6
0001c7 d2fe                      	do_lcd_data 'a'
0001c8 e708
0001c9 d2f3
0001ca d2fb                      	do_lcd_data 'x' ;4
0001cb e200
0001cc d2f0
0001cd d2f8                      	do_lcd_data ' '
0001ce e60e
0001cf d2ed
0001d0 d2f5                      	do_lcd_data 'n'
0001d1 e705
0001d2 d2ea
0001d3 d2f2                      	do_lcd_data 'u'
0001d4 e60d
0001d5 d2e7
0001d6 d2ef                      	do_lcd_data 'm'; 16
0001d7 ea08
0001d8 d2dd
0001d9 d2ec                      	do_lcd_command LCD_SEC_LINE
0001da e60f
0001db d2e1
0001dc d2e9                      	do_lcd_data 'o'
0001dd e606
0001de d2de
0001df d2e6                      	do_lcd_data 'f'
0001e0 e200
0001e1 d2db
0001e2 d2e3                      	do_lcd_data ' '
0001e3 e703
0001e4 d2d8
0001e5 d2e0                      	do_lcd_data 's'
0001e6 e704
0001e7 d2d5
0001e8 d2dd                      	do_lcd_data 't'
0001e9 e601
0001ea d2d2
0001eb d2da                      	do_lcd_data 'a'
0001ec e704
0001ed d2cf
0001ee d2d7                      	do_lcd_data 't'
0001ef e609
0001f0 d2cc
0001f1 d2d4                      	do_lcd_data 'i'
0001f2 e60f
0001f3 d2c9
0001f4 d2d1                      	do_lcd_data 'o'
0001f5 e60e
0001f6 d2c6
0001f7 d2ce                      	do_lcd_data 'n'
0001f8 e703
0001f9 d2c3
0001fa d2cb                      	do_lcd_data 's'
0001fb e30a
0001fc d2c0
0001fd d2c8                      	do_lcd_data ':'
0001fe e200
0001ff d2bd
000200 d2c5                      	do_lcd_data ' '
000201 9508                      	ret
                                 
                                 lcd_output_two: ; "Name of station (newline)"
000202 e40e
000203 d2b9
000204 d2c1                      	do_lcd_data 'N'
000205 e601
000206 d2b6
000207 d2be                      	do_lcd_data 'a'
000208 e60d
000209 d2b3
00020a d2bb                      	do_lcd_data 'm'
00020b e605
00020c d2b0
00020d d2b8                      	do_lcd_data 'e' ;4
00020e e200
00020f d2ad
000210 d2b5                      	do_lcd_data ' '
000211 e60f
000212 d2aa
000213 d2b2                      	do_lcd_data 'o'
000214 e606
000215 d2a7
000216 d2af                      	do_lcd_data 'f'
000217 e200
000218 d2a4
000219 d2ac                      	do_lcd_data ' ' ;4
00021a e703
00021b d2a1
00021c d2a9                      	do_lcd_data 's'
00021d e704
00021e d29e
00021f d2a6                      	do_lcd_data 't'
000220 e601
000221 d29b
000222 d2a3                      	do_lcd_data 'a'
000223 e704
000224 d298
000225 d2a0                      	do_lcd_data 't'
000226 e609
000227 d295
000228 d29d                      	do_lcd_data 'i'
000229 e60f
00022a d292
00022b d29a                      	do_lcd_data 'o'
00022c e60e
00022d d28f
00022e d297                      	do_lcd_data 'n'
00022f e200
000230 d28c
000231 d294                      	do_lcd_data ' ' ;
000232 ea08
000233 d282
000234 d291                      	do_lcd_command LCD_SEC_LINE
000235 9508                      	ret
                                 
                                 lcd_output_three: ; "Time from statio(new line)n is "
000236 e504
000237 d285
000238 d28d                      	do_lcd_data 'T'
000239 e609
00023a d282
00023b d28a                      	do_lcd_data 'i'
00023c e60d
00023d d27f
00023e d287                      	do_lcd_data 'm'
00023f e605
000240 d27c
000241 d284                      	do_lcd_data 'e' ;4
000242 e200
000243 d279
000244 d281                      	do_lcd_data ' '
000245 e606
000246 d276
000247 d27e                      	do_lcd_data 'f'
000248 e702
000249 d273
00024a d27b                      	do_lcd_data 'r'
00024b e60f
00024c d270
00024d d278                      	do_lcd_data 'o' ;4
00024e e60d
00024f d26d
000250 d275                      	do_lcd_data 'm' 
000251 e200
000252 d26a
000253 d272                      	do_lcd_data ' '
000254 e703
000255 d267
000256 d26f                      	do_lcd_data 's'
000257 e704
000258 d264
000259 d26c                      	do_lcd_data 't' ;4
00025a e601
00025b d261
00025c d269                      	do_lcd_data 'a'
00025d e704
00025e d25e
00025f d266                      	do_lcd_data 't'
000260 e609
000261 d25b
000262 d263                      	do_lcd_data 'i'
000263 e60f
000264 d258
000265 d260                      	do_lcd_data 'o' ;16	
000266 ea08
000267 d24e
000268 d25d                      	do_lcd_command LCD_SEC_LINE
000269 e60e
00026a d252
00026b d25a                      	do_lcd_data 'n'
00026c e200
00026d d24f
00026e d257                      	do_lcd_data ' '
00026f 9508                      	ret
                                 
                                 lcd_output_four: ; "Stop time at any(newline)station is: "
000270 e503
000271 d24b
000272 d253                      	do_lcd_data 'S'
000273 e704
000274 d248
000275 d250                      	do_lcd_data 't'
000276 e60f
000277 d245
000278 d24d                      	do_lcd_data 'o'
000279 e700
00027a d242
00027b d24a                      	do_lcd_data 'p' ;4
00027c e200
00027d d23f
00027e d247                      	do_lcd_data ' '
00027f e704
000280 d23c
000281 d244                      	do_lcd_data 't'
000282 e609
000283 d239
000284 d241                      	do_lcd_data 'i'
000285 e60d
000286 d236
000287 d23e                      	do_lcd_data 'm' ;4
000288 e605
000289 d233
00028a d23b                      	do_lcd_data 'e' 
00028b e200
00028c d230
00028d d238                      	do_lcd_data ' '
00028e e601
00028f d22d
000290 d235                      	do_lcd_data 'a'
000291 e704
000292 d22a
000293 d232                      	do_lcd_data 't' ;4
000294 e200
000295 d227
000296 d22f                      	do_lcd_data ' '
000297 e601
000298 d224
000299 d22c                      	do_lcd_data 'a'
00029a e60e
00029b d221
00029c d229                      	do_lcd_data 'n'
00029d e709
00029e d21e
00029f d226                      	do_lcd_data 'y' ;16	
0002a0 ea08
0002a1 d214
0002a2 d223                      	do_lcd_command LCD_SEC_LINE
0002a3 e703
0002a4 d218
0002a5 d220                      	do_lcd_data 's'
0002a6 e704
0002a7 d215
0002a8 d21d                      	do_lcd_data 't'
0002a9 e601
0002aa d212
0002ab d21a                      	do_lcd_data 'a'
0002ac e704
0002ad d20f
0002ae d217                      	do_lcd_data 't' ;4
0002af e609
0002b0 d20c
0002b1 d214                      	do_lcd_data 'i'
0002b2 e60f
0002b3 d209
0002b4 d211                      	do_lcd_data 'o'
0002b5 e60e
0002b6 d206
0002b7 d20e                      	do_lcd_data 'n' 
0002b8 e200
0002b9 d203
0002ba d20b                      	do_lcd_data ' ' ;4
0002bb e609
0002bc d200
0002bd d208                      	do_lcd_data 'i'
0002be e703
0002bf d1fd
0002c0 d205                      	do_lcd_data 's'   	
0002c1 e30a
0002c2 d1fa
0002c3 d202                      	do_lcd_data ':'
0002c4 e200
0002c5 d1f7
0002c6 d1ff                      	do_lcd_data ' ' ;4
0002c7 9508                      	ret	
                                 
                                 print_numstation:
0002c8 935f                      	push temp
0002c9 e001
0002ca d1eb
0002cb d1fa                      	do_lcd_command LCD_DISP_CLR
0002cc e40e
0002cd d1ef
0002ce d1f7                      	do_lcd_data 'N'
0002cf e705
0002d0 d1ec
0002d1 d1f4                      	do_lcd_data 'u'
0002d2 e60d
0002d3 d1e9
0002d4 d1f1                      	do_lcd_data 'm'
0002d5 e602
0002d6 d1e6
0002d7 d1ee                      	do_lcd_data 'b'
0002d8 e605
0002d9 d1e3
0002da d1eb                      	do_lcd_data 'e'
0002db e702
0002dc d1e0
0002dd d1e8                      	do_lcd_data 'r' 
0002de e200
0002df d1dd
0002e0 d1e5                      	do_lcd_data ' '
0002e1 e60f
0002e2 d1da
0002e3 d1e2                      	do_lcd_data 'o'
0002e4 e606
0002e5 d1d7
0002e6 d1df                      	do_lcd_data 'f'
0002e7 ea08
0002e8 d1cd
0002e9 d1dc                      	do_lcd_command LCD_SEC_LINE
0002ea e703
0002eb d1d1
0002ec d1d9                      	do_lcd_data 's'
0002ed e704
0002ee d1ce
0002ef d1d6                      	do_lcd_data 't' 
0002f0 e601
0002f1 d1cb
0002f2 d1d3                      	do_lcd_data 'a'
0002f3 e704
0002f4 d1c8
0002f5 d1d0                      	do_lcd_data 't' 
0002f6 e609
0002f7 d1c5
0002f8 d1cd                      	do_lcd_data 'i'
0002f9 e60f
0002fa d1c2
0002fb d1ca                      	do_lcd_data 'o'
0002fc e60e
0002fd d1bf
0002fe d1c7                      	do_lcd_data 'n'
0002ff e200
000300 d1bc
000301 d1c4                      	do_lcd_data ' ' ;8
000302 e609
000303 d1b9
000304 d1c1                      	do_lcd_data 'i'
000305 e703
000306 d1b6
000307 d1be                      	do_lcd_data 's'   
000308 e30a
000309 d1b3
00030a d1bb                      	do_lcd_data ':'
00030b e200
00030c d1b0
00030d d1b8                      	do_lcd_data ' ' ;12
00030e 9150 0205                 	lds temp, num_stations
000310 305a                      	cpi temp, 10
000311 f051                      	breq print_numstation_10
000312 5d50                      	subi temp, -48
000313 2f05
000314 d1a8
000315 d1b0                      	do_lcd_data_reg temp
                                 print_numstation_done:
000316 d1dd                      	rcall sleep_5000ms
000317 e001
000318 d19d
000319 d1ac                      	do_lcd_command LCD_DISP_CLR
00031a 915f                      	pop temp
00031b 9508                      	ret
                                 print_numstation_10:
00031c e301
00031d d19f
00031e d1a7                      	do_lcd_data '1'
00031f e300
000320 d19c
000321 d1a4                      	do_lcd_data '0'
000322 940c 0316                 	jmp print_numstation_done
                                 	
                                 
                                 print_incorrect_input:
000324 e001
000325 d190
000326 d19f                      	do_lcd_command LCD_DISP_CLR
000327 e409
000328 d194
000329 d19c                      	do_lcd_data 'I'
00032a e40e
00032b d191
00032c d199                      	do_lcd_data 'N'
00032d e403
00032e d18e
00032f d196                      	do_lcd_data 'C'
000330 e40f
000331 d18b
000332 d193                      	do_lcd_data 'O'
000333 e502
000334 d188
000335 d190                      	do_lcd_data 'R'
000336 e502
000337 d185
000338 d18d                      	do_lcd_data 'R' 
000339 e502
00033a d182
00033b d18a                      	do_lcd_data 'R'
00033c e405
00033d d17f
00033e d187                      	do_lcd_data 'E'
00033f e403
000340 d17c
000341 d184                      	do_lcd_data 'C'
000342 e504
000343 d179
000344 d181                      	do_lcd_data 'T'
000345 ea08
000346 d16f
000347 d17e                      	do_lcd_command LCD_SEC_LINE
000348 e409
000349 d173
00034a d17b                      	do_lcd_data 'I'
00034b e40e
00034c d170
00034d d178                      	do_lcd_data 'N'
00034e e500
00034f d16d
000350 d175                      	do_lcd_data 'P'
000351 e505
000352 d16a
000353 d172                      	do_lcd_data 'U'
000354 e504
000355 d167
000356 d16f                      	do_lcd_data 'T'
000357 9508                      	ret
                                 
                                 print_finish:
000358 e001
000359 d15c
00035a d16b                      	do_lcd_command LCD_DISP_CLR
00035b e403
00035c d160
00035d d168                      	do_lcd_data 'C'
00035e e40f
00035f d15d
000360 d165                      	do_lcd_data 'O'
000361 e40e
000362 d15a
000363 d162                      	do_lcd_data 'N'
000364 e406
000365 d157
000366 d15f                      	do_lcd_data 'F' ;4
000367 e409
000368 d154
000369 d15c                      	do_lcd_data 'I'
00036a e407
00036b d151
00036c d159                      	do_lcd_data 'G' 
00036d e505
00036e d14e
00036f d156                      	do_lcd_data 'U'
000370 e502
000371 d14b
000372 d153                      	do_lcd_data 'R' ;4
000373 e401
000374 d148
000375 d150                      	do_lcd_data 'A'
000376 e504
000377 d145
000378 d14d                      	do_lcd_data 'T'
000379 e409
00037a d142
00037b d14a                      	do_lcd_data 'I'
00037c e40f
00037d d13f
00037e d147                      	do_lcd_data 'O' ;4
00037f e40e
000380 d13c
000381 d144                      	do_lcd_data 'N'
000382 e200
000383 d139
000384 d141                      	do_lcd_data ' '
000385 e409
000386 d136
000387 d13e                      	do_lcd_data 'I'
000388 e503
000389 d133
00038a d13b                      	do_lcd_data 'S' ;4
00038b ea08
00038c d129
00038d d138                      	do_lcd_command LCD_SEC_LINE
00038e e403
00038f d12d
000390 d135                      	do_lcd_data 'C'
000391 e40f
000392 d12a
000393 d132                      	do_lcd_data 'O'
000394 e40d
000395 d127
000396 d12f                      	do_lcd_data 'M'
000397 e500
000398 d124
000399 d12c                      	do_lcd_data 'P' ;4
00039a e40c
00039b d121
00039c d129                      	do_lcd_data 'L'
00039d e405
00039e d11e
00039f d126                      	do_lcd_data 'E'
0003a0 e504
0003a1 d11b
0003a2 d123                      	do_lcd_data 'T'
0003a3 e405
0003a4 d118
0003a5 d120                      	do_lcd_data 'E' ;4
0003a6 e200
0003a7 d115
0003a8 d11d                      	do_lcd_data ' '
0003a9 e507
0003aa d112
0003ab d11a                      	do_lcd_data 'W'
0003ac e401
0003ad d10f
0003ae d117                      	do_lcd_data 'A'
0003af e409
0003b0 d10c
0003b1 d114                      	do_lcd_data 'I' ;4
0003b2 e504
0003b3 d109
0003b4 d111                      	do_lcd_data 'T'
0003b5 e20e
0003b6 d106
0003b7 d10e                      	do_lcd_data '.'
0003b8 e20e
0003b9 d103
0003ba d10b                      	do_lcd_data '.'
0003bb e20e
0003bc d100
0003bd d108                      	do_lcd_data '.' ;4
0003be d135                      	rcall sleep_5000ms
0003bf d134                      	rcall sleep_5000ms
0003c0 e001
0003c1 d0f4
0003c2 d103                      	do_lcd_command LCD_DISP_CLR	
0003c3 9508                      	ret
                                 
                                 print_namestation: ; TEMP2 has to be the station number printed
0003c4 e001
0003c5 d0f0
0003c6 d0ff                      	do_lcd_command LCD_DISP_CLR
0003c7 e40e
0003c8 d0f4
0003c9 d0fc                      	do_lcd_data 'N'
0003ca e601
0003cb d0f1
0003cc d0f9                      	do_lcd_data 'a'
0003cd e60d
0003ce d0ee
0003cf d0f6                      	do_lcd_data 'm'
0003d0 e605
0003d1 d0eb
0003d2 d0f3                      	do_lcd_data 'e' ;4
0003d3 e200
0003d4 d0e8
0003d5 d0f0                      	do_lcd_data ' '
0003d6 e60f
0003d7 d0e5
0003d8 d0ed                      	do_lcd_data 'o'
0003d9 e606
0003da d0e2
0003db d0ea                      	do_lcd_data 'f'
0003dc e200
0003dd d0df
0003de d0e7                      	do_lcd_data ' ' ;8
0003df e703
0003e0 d0dc
0003e1 d0e4                      	do_lcd_data 's'
0003e2 e704
0003e3 d0d9
0003e4 d0e1                      	do_lcd_data 't'
0003e5 e601
0003e6 d0d6
0003e7 d0de                      	do_lcd_data 'a'
0003e8 e704
0003e9 d0d3
0003ea d0db                      	do_lcd_data 't' ;12
0003eb e609
0003ec d0d0
0003ed d0d8                      	do_lcd_data 'i'
0003ee e60f
0003ef d0cd
0003f0 d0d5                      	do_lcd_data 'o'
0003f1 e60e
0003f2 d0ca
0003f3 d0d2                      	do_lcd_data 'n' ;15
0003f4 ea08
0003f5 d0c0
0003f6 d0cf                      	do_lcd_command LCD_SEC_LINE
0003f7 5c4f                      	subi temp2, -49
0003f8 2f04
0003f9 d0c3
0003fa d0cb                      	do_lcd_data_reg temp2
0003fb 5341                      	subi temp2, 49
0003fc e200
0003fd d0bf
0003fe d0c7                      	do_lcd_data ' '
0003ff e609
000400 d0bc
000401 d0c4                      	do_lcd_data 'i'
000402 e703
000403 d0b9
000404 d0c1                      	do_lcd_data 's' ;4
000405 e30a
000406 d0b6
000407 d0be                      	do_lcd_data ':'
000408 e200
000409 d0b3
00040a d0bb                      	do_lcd_data ' '
00040b 9508                      	ret
                                 
                                 print_station: ;temp2 holds stationnumber-1
00040c 930f                      	push outp
00040d 936f                      	push temp1
00040e 937f                      	push temp3
                                 
00040f 2f74                      	mov temp3, temp2
000410 e06a                      	ldi temp1, 10
000411 9f76                      	mul temp3, temp1
000412 2dc0                      	mov YL, r0
000413 27dd                      	clr YH
000414 e066                      	ldi temp1, low(station_names)
000415 0fc6                      	add YL, temp1
000416 e062                      	ldi temp1, high(station_names)
000417 1fd6                      	adc YH, temp1
                                 
000418 e060                      	ldi temp1, 0
                                 print_station_loop:
000419 306a                      	cpi temp1, 10
00041a f039                      	breq print_station_done
00041b 9109                      	ld outp, Y+
00041c 2f00
00041d d09f
00041e d0a7                      	do_lcd_data_reg outp
00041f 9563                      	inc temp1
000420 940c 0419                 	jmp print_station_loop
                                 
                                 print_station_done:
000422 d0d1                      	rcall sleep_5000ms
000423 e001
000424 d091
000425 d0a0                      	do_lcd_command LCD_DISP_CLR
                                 
000426 917f                      	pop temp3
000427 916f                      	pop temp1
000428 910f                      	pop outp
000429 9508                      	ret
                                 
                                 emulator_LCD_display:
00042a 935f                      	push temp
00042b e001
00042c d089
00042d d098                      	do_lcd_command LCD_DISP_CLR
                                 	; NEXT STATION NAME
00042e d04f                      	rcall write_nextstation
                                 	; MEASURED RPS
00042f e85b                      	ldi temp, 139
000430 2f05
000431 d084
000432 d093                      	do_lcd_command_reg temp
000433 d061                      	rcall write_rps
                                 	; TARGET RPS
000434 e85e                      	ldi temp, 142
000435 2f05
000436 d07f
000437 d08e                      	do_lcd_command_reg temp
000438 d062                      	rcall write_targetrps
                                 	; TOURIST COUNT
000439 ea08
00043a d07b
00043b d08a                      	do_lcd_command LCD_SEC_LINE
00043c d046                      	rcall write_tourist_count
                                 	; TOURIST ON
00043d ea5d                      	ldi temp, 173
00043e 2f05
00043f d076
000440 d085                      	do_lcd_command_reg temp
000441 e40f
000442 d07a
000443 d082                      	do_lcd_data 'O'
000444 e40e
000445 d077
000446 d07f                      	do_lcd_data 'N'
000447 d041                      	rcall write_tourist_on
                                 	; TOURIST OFF
000448 eb51                      	ldi temp, 177
000449 2f05
00044a d06b
00044b d07a                      	do_lcd_command_reg temp
00044c e40f
00044d d06f
00044e d077                      	do_lcd_data 'O'
00044f e406
000450 d06c
000451 d074                      	do_lcd_data 'F'
000452 e406
000453 d069
000454 d071                      	do_lcd_data 'F'
000455 d039                      	rcall write_tourist_off
                                 	; Seconds passed
000456 eb56                      	ldi temp, 182
000457 2f05
000458 d05d
000459 d06c                      	do_lcd_command_reg temp
00045a d01d                      	rcall write_seconds
                                 	; MOVE OR STOP
00045b eb57                      	ldi temp, 183
00045c 2f05
00045d d058
00045e d067                      	do_lcd_command_reg temp
00045f d002                      	rcall write_move_stop
000460 915f                      	pop temp
000461 9508                      	ret
                                 
                                 write_move_stop:
000462 935f                      	push temp
000463 9150 027c                 	lds temp, monorail_stop_move
000465 3051                      	cpi temp, 1
000466 f039                      	breq write_move
000467 3052                      	cpi temp, 2
000468 f051                      	breq write_between
                                 	; else stop
000469 e503
00046a d052
00046b d05a                      	do_lcd_data 'S'
00046c 940c 0476                 	jmp write_move_epilogue
                                 write_move:
00046e e40d
00046f d04d
000470 d055                      	do_lcd_data 'M'
000471 940c 0476                 	jmp write_move_epilogue
                                 write_between:
000473 e402
000474 d048
000475 d050                      	do_lcd_data 'B'
                                 write_move_epilogue:
000476 915f                      	pop temp
000477 9508                      	ret
                                 
                                 write_seconds:
000478 935f                      	push temp
000479 9150 027e                 	lds temp, seconds_passed
00047b d025                      	rcall write_two_digit
00047c 915f                      	pop temp
00047d 9508                      	ret
                                 
                                 write_nextstation:
00047e 934f                      	push temp2
00047f 9140 027b                 	lds temp2, next_station
                                 	;dec temp2
000481 d3b2                      	rcall print_station_help
000482 914f                      	pop temp2
                                 
                                 write_tourist_count:
000483 935f                      	push temp
000484 9150 0277                 	lds temp, tourist_count ; TEMP holds RPS
000486 d01a                      	rcall write_two_digit
000487 915f                      	pop temp
000488 9508                      	ret	
                                 
                                 write_tourist_on:
000489 935f                      	push temp
00048a 9150 0275                 	lds temp, tourist_on ; TEMP holds RPS
00048c d014                      	rcall write_two_digit
00048d 915f                      	pop temp
00048e 9508                      	ret	
                                 write_tourist_off:
00048f 935f                      	push temp
000490 9150 0276                 	lds temp, tourist_off ; TEMP holds RPS
000492 d00e                      	rcall write_two_digit
000493 915f                      	pop temp
000494 9508                      	ret	
                                 write_rps: ;2 DIGITS
000495 935f                      	push temp
000496 9150 0278                 	lds temp, currRPS ; TEMP holds RPS
000498 d008                      	rcall write_two_digit
000499 915f                      	pop temp
00049a 9508                      	ret
                                 
                                 write_targetrps: ;2 DIGITS
00049b 935f                      	push temp
00049c 9150 027a                 	lds temp, targetRPS ; TEMP holds RPS
00049e d002                      	rcall write_two_digit
00049f 915f                      	pop temp
0004a0 9508                      	ret
                                 
                                 write_two_digit:
0004a1 935f                      	push temp
0004a2 936f                      	push temp1
                                 	 ; TEMP holds 2 digit
0004a3 2766                      	clr temp1 ; temp1 holds division for 10
                                 tens:
0004a4 305a                      	cpi temp, 10
0004a5 f408                      	brsh find10s
0004a6 c008                      	rjmp finish_write
                                 find10s:
0004a7 505a                      	subi temp, 10
0004a8 9563                      	inc temp1
0004a9 305a                      	cpi temp, 10
0004aa f7e0                      	brsh find10s ; Still divide by 10 reloop
0004ab 5d60                      	subi temp1, -48
0004ac 2f06
0004ad d00f
0004ae d017                      	do_lcd_data_reg temp1
                                 finish_write:
0004af 5d50                      	subi temp, -48
0004b0 2f05
0004b1 d00b
0004b2 d013                      	do_lcd_data_reg temp
0004b3 916f                      	pop temp1
0004b4 915f                      	pop temp
0004b5 9508                      	ret	
                                 ; Note: From example LCD
                                 
                                 ; LCD Instructions
                                 .equ LCD_RS = 7
                                 .equ LCD_E = 6
                                 .equ LCD_RW = 5
                                 .equ LCD_BE = 4
                                 ; LCD Commands
                                 lcd_command:
0004b6 bb01                      	out PORTF, r16
0004b7 d01f                      	rcall sleep_1ms
0004b8 9a16                      	lcd_set LCD_E
0004b9 d01d                      	rcall sleep_1ms
0004ba 9816                      	lcd_clr LCD_E
0004bb d01b                      	rcall sleep_1ms
0004bc 9508                      	ret
                                 lcd_data:
0004bd bb01                      	out PORTF, r16
0004be 9a17                      	lcd_set LCD_RS
0004bf d017                      	rcall sleep_1ms
0004c0 9a16                      	lcd_set LCD_E
0004c1 d015                      	rcall sleep_1ms
0004c2 9816                      	lcd_clr LCD_E
0004c3 d013                      	rcall sleep_1ms
0004c4 9817                      	lcd_clr LCD_RS
0004c5 9508                      	ret
                                 lcd_wait:
0004c6 930f                      	push r16
0004c7 2700                      	clr r16
0004c8 bb00                      	out DDRF, r16
0004c9 bb01                      	out PORTF, r16
0004ca 9a15                      	lcd_set LCD_RW
                                 lcd_wait_loop:
0004cb d00b                      	rcall sleep_1ms
0004cc 9a16                      	lcd_set LCD_E
0004cd d009                      	rcall sleep_1ms
0004ce b10f                      	in r16, PINF
0004cf 9816                      	lcd_clr LCD_E
0004d0 fd07                      	sbrc r16, 7
0004d1 cff9                      	rjmp lcd_wait_loop
0004d2 9815                      	lcd_clr LCD_RW
0004d3 ef0f                      	ser r16
0004d4 bb00                      	out DDRF, r16
0004d5 910f                      	pop r16
                                 .include "delay.asm"
0004d6 9508                      
                                 ; Delay Constants
                                 .equ F_CPU = 16000000
                                 .equ DELAY_1MS = F_CPU / 4 / 1000 - 4 	; 4 cycles per iteration - setup/call-return overhead
                                 
                                 ; Delay commands
                                 sleep_1ms:
0004d7 938f                      	push r24
0004d8 939f                      	push r25
0004d9 e09f                      	ldi r25, high(DELAY_1MS)
0004da e98c                      	ldi r24, low(DELAY_1MS)
                                 delayloop_1ms:
0004db 9701                      	sbiw r25:r24, 1
0004dc f7f1                      	brne delayloop_1ms
0004dd 919f                      	pop r25
0004de 918f                      	pop r24
0004df 9508                      	ret
                                 sleep_5ms:
0004e0 dff6                      	rcall sleep_1ms
0004e1 dff5                      	rcall sleep_1ms
0004e2 dff4                      	rcall sleep_1ms
0004e3 dff3                      	rcall sleep_1ms
0004e4 dff2                      	rcall sleep_1ms
0004e5 9508                      	ret
                                 sleep_20ms:
0004e6 dff9                      	rcall sleep_5ms
0004e7 dff8                      	rcall sleep_5ms
0004e8 dff7                      	rcall sleep_5ms
0004e9 dff6                      	rcall sleep_5ms
0004ea dff5                      	rcall sleep_5ms
0004eb 9508                      	ret
                                 sleep_1000ms:
0004ec 935f                      	push temp
0004ed 2755                      	clr temp
                                 	loop_50:
0004ee 3352                      		cpi temp, 50
0004ef f061                      		breq finish
0004f0 dff5                      		rcall sleep_20ms
0004f1 9553                      		inc temp
0004f2 940c 04ee                 		jmp loop_50
                                 sleep_5000ms:
0004f4 935f                      	push temp
0004f5 2755                      	clr temp
                                 	loop_250:
0004f6 3f5a                      		cpi temp, 250	;reduced to 50 for testing
0004f7 f021                      		breq finish
0004f8 dfed                      		rcall sleep_20ms
0004f9 9553                      		inc temp
0004fa 940c 04f6                 		jmp loop_250
                                 finish:
0004fc 915f                      	pop temp
                                 .include "dcmotor.asm"
0004fd 9508                      
0004fe 936f                      	push temp1
                                 
                                 	; Output things and OVERRIDE NORMAL PORT FUNCTIONALITY
0004ff ef6f                      	ser temp1
000500 b96d                      	out DDRE, temp1
000501 2766                      	clr temp1	; connected to PE5
000502 9360 0099                 	sts OCR3AH, temp1
000504 2766                      	clr temp1
000505 9360 0098                 	sts OCR3AL, temp1
000507 e061                      	ldi temp1, (1 << CS30) 	; set the Timer3 to Phase Correct PWM mode. 
000508 9360 0091                 	sts TCCR3B, temp1 ; WGM31=1  phase correct PWN, 8 bits
00050a ea63                      	ldi temp1, (1 << WGM31)|(1<< WGM30)|(1<<COM3B1)|(1<<COM3A1) ; COM3B1=1 make OC3B override the normal port functionality of the I/0 pin PL2
00050b 9360 0090                 	sts TCCR3A, temp1
                                 
00050d e062                      	ldi temp1, 0b00000010
00050e bd65                      	out TCCR0B, temp1 ; set prescaler to 8 = 278 microseconds
                                 
00050f 916f                      	pop temp1
000510 9508                      	ret
                                 
                                 ; Mulitply number by 3 to give RPS, divide by 4 to account for 4 holes = /2
                                 measure_RPS:
000511 936f                      	push temp1
000512 9160 0279                 	lds temp1, holes
000514 9565                      	asr temp1 ; TEMP1 is RPS
000515 9360 0278                 	sts currRPS, temp1
000517 916f                      	pop temp1
                                 .include "keypad.asm"
000518 9508                      
000519 936f                      	push temp1; prolouge
                                 
00051a ef60                      	ldi temp1, PORTLDIR ; columns are outputs, rows are inputs
00051b 9360 010a                 	STS DDRL, temp1     ; cannot use out
00051d ef6f                      	ser temp1
                                 
00051e 916f                      	pop temp1 ; epilouge
00051f 9508                      	ret
                                 
                                 ; Keeps scanning the keypad until any key is pressed and returns the value of that key
                                 keypad_scan: 
000520 ee3f                      	ldi mask, INITCOLMASK ; initial column mask
000521 2722                      	clr col ; initial column
                                 colloop:
000522 9330 010b                 	STS PORTL, mask ; set column to mask value (sets column 0 off)
000524 ef5f                      	ldi temp, 0xFF ; implement a delay so the hardware can stabilize
                                 delay:
000525 955a                      	dec temp
000526 f7f1                      	brne delay
000527 9150 0109                 	LDS temp, PINL ; read PORTL. Cannot use in 
000529 705f                      	andi temp, ROWMASK ; read only the row bits
00052a 305f                      	cpi temp, 0xF ; check if any rows are grounded
00052b f069                      	breq nextcol ; if not go to the next column
00052c e031                      	ldi mask, INITROWMASK ; initialise row check
00052d 2711                      	clr row ; initial row
                                 rowloop:      
00052e 2f45                      	mov temp2, temp
00052f 2343                      	and temp2, mask ; check masked bit
000530 f421                      	brne skipconv ; if the result is non-zero, we need to look again
000531 940c 0540                 	jmp convert ; if bit is clear, convert the bitcode
000533 940c 0520                 	jmp keypad_scan ; and start again
                                 skipconv:
000535 9513                      	inc row ; else move to the next row
000536 0f33                      	lsl mask ; shift the mask to the next bit
000537 940c 052e                 	jmp rowloop          
                                 nextcol:     
000539 3023                      	cpi col, 3 ; check if we're on the last column
00053a f329                      	breq keypad_scan ; if so, no buttons were pushed, so start again.
00053b 9408                      	sec ; else shift the column mask: We must set the carry bit
00053c 1f33                      	rol mask ; and then rotate left by a bit, shifting the carry into
                                 	; bit zero. We need this to make sure all the rows have pull-up resistors
00053d 9523                      	inc col ; increment column value
00053e 940c 0522                 	jmp colloop ; and check the next column
                                 ; convert function converts the row and column given to a binary number and also outputs the value to PORTC.
                                 ; Inputs come from registers row and col and output is in temp.
                                 convert:
000540 3023                      	cpi col, 3 ; if column is 3 we have a letter
000541 f049                      	breq letters
000542 3013                      	cpi row, 3 ; if row is 3 we have a symbol or 0
000543 f059                      	breq symbols
                                 
                                 number: ; otherwise we have a number (1-9)
000544 2f01                      	mov outp, row 
000545 0f00                      	lsl outp ; temp = row * 2
000546 0f01                      	add outp, row ; temp = row * 3
000547 0f02                      	add outp, col ; add the column address to get the offset from 1
000548 9503                      	inc outp ; add 1. Value of switch is row*3 + col + 1.
000549 940c 055a                 	jmp convert_end
                                 letters:
00054b e101                      	ldi outp, 0x11 ; 17 (+ 1) (+ 1) -- 48
00054c 0f01                      	add outp, row ; increment from 0xA by the row value
00054d 940c 055a                 	jmp convert_end
                                 symbols:
00054f 3020                      	cpi col, 0 ; check if we have a star
000550 f029                      	breq star
000551 3021                      	cpi col, 1 ; or if we have zero
000552 f031                      	breq zero
000553 ef03                      	ldi outp, 0xF3 ; we'll output 0xF for hash (0XF3 - 243 --48 = 291 (35))
000554 940c 055a                 	jmp convert_end
                                 star:
000556 ef0a                      	ldi outp, 0xFA ; we'll output 0xE for star (same process)
000557 940c 055a                 	jmp convert_end
                                 zero:
000559 2700                      	clr outp ; set to zero
                                 convert_end:
00055a 5d00                      	subi outp, -48 ; '0'
                                 Wait:
00055b 9140 0109                 	LDS temp2, PINL ; read PORTL. Cannot use in
00055d 704f                      	andi temp2, ROWMASK ; read only the row bits 
00055e 2343                      	and temp2, mask ; check masked bit
00055f f3d9                      	breq Wait ; if the result is non-zero,
000560 9508                      	ret
                                 
                                 
                                 ;Keeps reading the keypad until either special key D is pressed or an input_error occurs
                                 read_character:
000561 2700                      	clr outp ; prolouge
000562 2788                      	clr numberL
                                 read_character_loop1:
000563 dfbc                      	rcall keypad_scan
000564 320a                      	cpi outp, '*' ; invalid input
000565 f0c1                      	breq input_error
000566 3203                      	cpi outp, '#' ; whitespace
000567 f089                      	breq read_character_white_space
000568 3401                      	cpi outp, 'A' ; invalid input
000569 f0a1                      	breq input_error
00056a 3402                      	cpi outp, 'B' ; invalid input
00056b f091                      	breq input_error
00056c 3403                      	cpi outp, 'C' ; invalid input
00056d f081                      	breq input_error
00056e 3404                      	cpi outp, 'D' ; character submit
00056f f059                      	breq read_character_submit
                                 
                                 	;multiply by 10 incase of multiple digits
000570 e05a                      	ldi temp, 10
000571 9f85                      	mul numberL, temp
000572 2d80                      	mov numberL, r0
000573 0f80                      	add numberL, outp
000574 5380                      	subi numberL, 48 ; since keypad_scan returns '1' instead of 1 we need to adjust
000575 318b                      	cpi numberL, 27 ; max character is 26 ('Z') if we've exceeded this its an invalid input
000576 f43c                      	brge input_error 
                                 
000577 940c 0563                 	jmp read_character_loop1
                                 read_character_white_space:
000579 e200                      	ldi outp, ' ' ; return whitespace
00057a 9508                      	ret
                                 read_character_submit:
00057b 2f08                      	mov outp, numberL
00057c 5c00                      	subi outp, -64	;converts from number to character. 1 -> A etc
00057d 9508                      	ret
                                 
                                 
                                 
                                 input_error: ; invalid input entered
00057e dda5                      	rcall print_incorrect_input ;lcd.asm
00057f cb31                      	rjmp halt
                                 
                                 
                                 read_station_number: ; gets input for the number of stations
000580 936f                      	push temp1
000581 dc25                      	rcall lcd_output_one ; Output: "Type the max num of stations: "
000582 2788                      	clr numberL
                                 read_station_number_loop:
000583 df9c                      	rcall keypad_scan; waits for keypad input and returns character
000584 320a                      	cpi outp, '*' ; invalid input
000585 f3c1                      	breq input_error
000586 3203                      	cpi outp, '#' ; invalid input
000587 f3b1                      	breq input_error
000588 3401                      	cpi outp, 'A' ; invalid input
000589 f3a1                      	breq input_error
00058a 3402                      	cpi outp, 'B' ; invalid input
00058b f391                      	breq input_error
00058c 3403                      	cpi outp, 'C' ; invalid input
00058d f381                      	breq input_error
00058e 3404                      	cpi outp, 'D' ; station_number submit
00058f f0a1                      	breq read_station_number_check_limit_high
                                 
000590 2f00
000591 df2b
000592 df33                      	do_lcd_data_reg outp ; write current input to lcd
                                 
                                 	;multiply by 10 incase of multiple digits
000593 e05a                      	ldi temp, 10
000594 9f85                      	mul numberL, temp
000595 2d80                      	mov numberL, r0
000596 2d91                      	mov numberH, r1
000597 2f60                      	mov temp1, outp
000598 5360                      	subi temp1, 48
000599 0f86                      	add numberL, temp1
00059a 2766                      	clr temp1
00059b 1f96                      	adc numberH, temp1
                                 
                                 	;if three digits are entered, invalid input
00059c 3090                      	cpi numberH, 0
00059d f701                      	brne input_error
00059e 3684                      	cpi numberL, 100
00059f f6f4                      	brge input_error
                                 	
                                 	;if negative number, invalid input (should not be possible)
0005a0 3080                      	cpi numberL, 0
0005a1 f2e4                      	brlt input_error
                                 
0005a2 940c 0583                 	jmp read_station_number_loop ; read next digit
                                 
                                 read_station_number_check_limit_high: ; if number of stations is greater than upper limit (10) 
0005a4 308b                      	cpi numberL, 11						
0005a5 f00c                      	brlt read_station_number_check_limit_low
0005a6 e08a                      	ldi numberL, 10		; set to upper limit (10)
                                 read_station_number_check_limit_low: ; if number of stations is lower than lower limit (2)
0005a7 3082                      	cpi numberL, 2
0005a8 f40c                      	brge read_station_number_submit
0005a9 e082                      	ldi numberL, 2		; set to lower limit (2)
                                 read_station_number_submit:
0005aa 2f08                      	mov outp, numberL ; return station_number
0005ab 916f                      	pop temp1	;prolouge
0005ac 9508                      	ret
                                 
                                 
                                 	
                                 
                                 read_station_names: ; gets input for the name of a stations
0005ad e040                      	ldi temp2, 0
                                 
                                 read_station_names_loop:
0005ae 9180 0205                 	lds numberL, num_stations ; repeats once for each required station
0005b0 1748                      	cp temp2, numberL
0005b1 f0e1                      	breq read_stations_names_done ; if we've reached the limit move to the prolouge
                                 
                                 	; Find the station name place in the station_names memory block
0005b2 2f74                      	mov temp3, temp2
0005b3 e06a                      	ldi temp1, 10	
0005b4 9f76                      	mul temp3, temp1	;each name is 10 charcters long
0005b5 2d70                      	mov temp3, r0
0005b6 2dc0                      	mov YL, r0
0005b7 27dd                      	clr YH
0005b8 e066                      	ldi temp1, low(station_names)
0005b9 0fc6                      	add YL, temp1
0005ba e062                      	ldi temp1, high(station_names)
0005bb 1fd6                      	adc YH, temp1
                                 
                                 	; write "Name of station (newline)"
0005bc e001
0005bd def8
0005be df07                      	do_lcd_command LCD_DISP_CLR
0005bf dc42                      	rcall lcd_output_two
                                 
                                 	; Write current station number
0005c0 5c4f                      	subi temp2, -49
0005c1 2f04
0005c2 defa
0005c3 df02                      	do_lcd_data_reg temp2
0005c4 5341                      	subi temp2, 49
0005c5 e30a
0005c6 def6
0005c7 defe                      	do_lcd_data ':'
0005c8 d006                      	rcall read_station_name ; reads input and stroes 10 character station name
                                 
                                 	; Write "Name of station (i) is: "
0005c9 ddfa                      	rcall print_namestation
                                 	; Write station name
0005ca de41                      	rcall print_station
                                 
0005cb 9543                      	inc temp2 ; move to next station
0005cc 940c 05ae                 	jmp read_station_names_loop
                                 
                                 read_stations_names_done: ; epilogue
0005ce 9508                      	ret
                                 
                                 
                                 
                                 read_station_name: ; read charcter inputs and store in the station_names memory block
0005cf 936f                      	push temp1 ; prolouge
0005d0 934f                      	push temp2
0005d1 e060                      	ldi temp1, 0
                                 read_station_name_loop: ; loops through 10 characters
0005d2 306a                      	cpi temp1, 10
0005d3 f089                      	breq read_station_name_done ; Automatically submit when charcter limit is reached
0005d4 df8c                      	rcall read_character ; read a single character
0005d5 3400                      	cpi outp, 64 ; Check for name submit
0005d6 f039                      	breq read_station_name_fill_white_space
0005d7 2f00
0005d8 dee4
0005d9 deec                      	do_lcd_data_reg outp ; write inputed character to screen
0005da 9309                      	st Y+, outp ; store inputed charcter
0005db 9563                      	inc temp1 ; move to next character
0005dc 940c 05d2                 	jmp read_station_name_loop
                                 read_station_name_fill_white_space: ; if inputed name is less than 10 character the rest are filled with whitespace
0005de 306a                      	cpi temp1, 10
0005df f029                      	breq read_station_name_done
0005e0 e240                      	ldi temp2, ' '
0005e1 9349                      	st Y+, temp2
0005e2 9563                      	inc temp1
0005e3 940c 05de                 	jmp read_station_name_fill_white_space
                                 
                                 read_station_name_done: ; epilogue
0005e5 914f                      	pop temp2
0005e6 916f                      	pop temp1
0005e7 9508                      	ret
                                 
                                 
                                 
                                 
                                 
                                 read_travel_times: ; read the time to travel between stations
0005e8 936f                      	push temp1 ; prologue
0005e9 e042                      	ldi temp2, 2
                                 
                                 read_travel_times_loop:
0005ea 9180 0205                 	lds numberL, num_stations 
0005ec 1784                      	cp numberL, temp2
0005ed f194                      	brlt timelast_1 			; Check if upto the last station
0005ee e6ca                      	ldi YL,  low(time_travel)	; Setup Y to point to the correct position in the travel_times block
0005ef 2f64                      	mov temp1, temp2
0005f0 5062                      	subi temp1, 2
0005f1 0fc6                      	add YL, temp1
0005f2 e0d2                      	ldi YH, high(time_travel)
0005f3 2766                      	clr temp1
0005f4 1fd6                      	adc YH, temp1
                                 
                                 	;Write "Time from station (i) to (i+1) is:"
0005f5 e001
0005f6 debf
0005f7 dece                      	do_lcd_command LCD_DISP_CLR
0005f8 dc3d                      	rcall lcd_output_three
0005f9 2f64                      	mov temp1, temp2
0005fa 5d61                      	subi temp1, -47
0005fb 2f06
0005fc dec0
0005fd dec8                      	do_lcd_data_reg temp1
0005fe e200
0005ff debd
000600 dec5                      	do_lcd_data ' '
000601 e704
000602 deba
000603 dec2                      	do_lcd_data 't'
000604 e60f
000605 deb7
000606 debf                      	do_lcd_data 'o'
000607 e200
000608 deb4
000609 debc                      	do_lcd_data ' '
00060a 2f64                      	mov temp1, temp2
00060b 5d60                      	subi temp1, -48
00060c 2f06
00060d deaf
00060e deb7                      	do_lcd_data_reg temp1
00060f e200
000610 deac
000611 deb4                      	do_lcd_data ' '
000612 e609
000613 dea9
000614 deb1                      	do_lcd_data 'i'
000615 e703
000616 dea6
000617 deae                      	do_lcd_data 's'
000618 e30a
000619 dea3
00061a deab                      	do_lcd_data ':'
00061b d02f                      	rcall read_travel_time ; Read the travel time
00061c 8308                      	st Y, outp ; write travel_time to memory
                                 
00061d 9543                      	inc temp2 ; move to next station
00061e 940c 05ea                 	jmp read_travel_times_loop
                                 
                                 timelast_1: ; Special handling is required for the last station
000620 e7c3                      	ldi YL,  low(time_travel) + 9 ; Always stored in the last byte in the block
000621 e0db                      	ldi YH, high(time_travel) + 9
                                 
                                 	; Write "Time from station (i) to 1 is: "
000622 e001
000623 de92
000624 dea1                      	do_lcd_command LCD_DISP_CLR
000625 dc10                      	rcall lcd_output_three
000626 9160 0205                 	lds temp1, num_stations
000628 5d60                      	subi temp1, -48
000629 2f06
00062a de92
00062b de9a                      	do_lcd_data_reg temp1
00062c e200
00062d de8f
00062e de97                      	do_lcd_data ' '
00062f e704
000630 de8c
000631 de94                      	do_lcd_data 't'
000632 e60f
000633 de89
000634 de91                      	do_lcd_data 'o'
000635 e200
000636 de86
000637 de8e                      	do_lcd_data ' '
000638 e301
000639 de83
00063a de8b                      	do_lcd_data '1'
00063b e200
00063c de80
00063d de88                      	do_lcd_data ' '
00063e e609
00063f de7d
000640 de85                      	do_lcd_data 'i'
000641 e703
000642 de7a
000643 de82                      	do_lcd_data 's'
000644 e30a
000645 de77
000646 de7f                      	do_lcd_data ':'
000647 d003                      	rcall read_travel_time ; Read travel_time
000648 8308                      	st Y, outp ; store travel_time
                                 
000649 916f                      	pop temp1 ; epilogue
00064a 9508                      	ret
                                 
                                 
                                 
                                 
                                 read_travel_time: ; read singular travel_time
00064b 935f                      	push temp	;prolouge
00064c 934f                      	push temp2
00064d 2788                      	clr numberL
                                 read_travel_time_loop:
00064e ded1                      	rcall keypad_scan; waits for keypad input and returns character
00064f 320a                      	cpi outp, '*'	;invalid input
000650 f141                      	breq input_error2
000651 3203                      	cpi outp, '#'	;invalid input
000652 f131                      	breq input_error2
000653 3401                      	cpi outp, 'A'	;invalid input
000654 f121                      	breq input_error2
000655 3402                      	cpi outp, 'B'	;invalid input
000656 f111                      	breq input_error2
000657 3403                      	cpi outp, 'C'	;invalid input
000658 f101                      	breq input_error2
000659 3404                      	cpi outp, 'D'	;submit
00065a f0a1                      	breq read_travel_time_check_limit_high
                                 
00065b 2f00
00065c de60
00065d de68                      	do_lcd_data_reg outp ; write current input
                                 
                                 	; multiply by 10 incase of multiple digits
00065e e05a                      	ldi temp, 10
00065f 9f85                      	mul numberL, temp
000660 2d80                      	mov numberL, r0
000661 2d91                      	mov numberH, r1
000662 2f60                      	mov temp1, outp
000663 5360                      	subi temp1, 48
000664 0f86                      	add numberL, temp1
000665 2766                      	clr temp1
000666 1f96                      	adc numberH, temp1
                                 
                                 	; if number has three digits or is negative -> invalid input
000667 3090                      	cpi numberH, 0
000668 f481                      	brne input_error2
000669 3684                      	cpi numberL, 100
00066a f474                      	brge input_error2
00066b 3080                      	cpi numberL, 0
00066c f064                      	brlt input_error2
                                 
00066d 940c 064e                 	jmp read_travel_time_loop
                                 
                                 read_travel_time_check_limit_high: ; if travel time is greater than 10 
00066f 308b                      	cpi numberL, 11
000670 f00c                      	brlt read_travel_time_check_limit_low
000671 e08a                      	ldi numberL, 10						; set to 10
                                 read_travel_time_check_limit_low: ; if travel time is less than 1
000672 3081                      	cpi numberL, 1
000673 f40c                      	brge read_travel_time_submit
000674 e081                      	ldi numberL, 1						;set to 1
                                 read_travel_time_submit:
000675 2f08                      	mov outp, numberL ; output read number
000676 914f                      	pop temp2	;epilogue
000677 915f                      	pop temp
000678 9508                      	ret
                                 
                                 	
                                 input_error2: ; write "Invalid input"
000679 dcaa                      	rcall print_incorrect_input
00067a ca36                      	rjmp halt
                                 
                                 read_stop_time: ; read the time spent stopped at each station
00067b e7c4                      	ldi YL,  low(time_stop)
00067c e0d2                      	ldi YH, high(time_stop)
00067d e001
00067e de37
00067f de46                      	do_lcd_command LCD_DISP_CLR
000680 dbef                      	rcall lcd_output_four
                                 
000681 2788                      	clr numberL
                                 read_stop_time_loop:
000682 de9d                      	rcall keypad_scan; waits for keypad input and returns character
000683 320a                      	cpi outp, '*' ; invalid input
000684 f3a1                      	breq input_error2
000685 3203                      	cpi outp, '#' ; invalid input
000686 f391                      	breq input_error2
000687 3401                      	cpi outp, 'A' ; invalid input
000688 f381                      	breq input_error2
000689 3402                      	cpi outp, 'B' ; invalid input
00068a f371                      	breq input_error2
00068b 3403                      	cpi outp, 'C' ; invalid input
00068c f361                      	breq input_error2
00068d 3404                      	cpi outp, 'D' ; submit input
00068e f0a1                      	breq read_stop_time_check_limit_high
                                 
00068f 2f00
000690 de2c
000691 de34                      	do_lcd_data_reg outp ; write current input to lcd
                                 
                                 	; multiply by 10 incase of multiple digits
000692 e05a                      	ldi temp, 10
000693 9f85                      	mul numberL, temp
000694 2d80                      	mov numberL, r0
000695 2d91                      	mov numberH, r1
000696 2f60                      	mov temp1, outp
000697 5360                      	subi temp1, 48
000698 0f86                      	add numberL, temp1
000699 2766                      	clr temp1
00069a 1f96                      	adc numberH, temp1
                                 
                                 	; if number has three digits or is negative -> invalid input
00069b 3090                      	cpi numberH, 0
00069c f6e1                      	brne input_error2
00069d 3684                      	cpi numberL, 100
00069e f6d4                      	brge input_error2
00069f 3080                      	cpi numberL, 0
0006a0 f2c4                      	brlt input_error2
                                 
0006a1 940c 0682                 	jmp read_stop_time_loop ; read next digit
                                 
                                 read_stop_time_check_limit_high: ; if travel time is greater than 5 
0006a3 3086                      	cpi numberL, 6
0006a4 f00c                      	brlt read_stop_time_check_limit_low
0006a5 e085                      	ldi numberL, 5					; set to 5
                                 read_stop_time_check_limit_low:	 ; if travel time is less than 2
0006a6 3082                      	cpi numberL, 2
0006a7 f40c                      	brge read_stop_time_submit
0006a8 e082                      	ldi numberL, 2					; set to 2
                                 read_stop_time_submit:
0006a9 2f08                      	mov outp, numberL
                                 
0006aa 8308                      	st Y, outp	; retutn input
                                 .include "timer.asm"
0006ab 9508                      
0006ac 936f                      	push temp1
                                 
                                 	; initialise variables
0006ad 2766                      	clr temp1
0006ae 9360 0202                 	sts TempCounter, temp1 			; initialise temporary counter to 0
0006b0 9360 0203                 	sts TempCounter + 1, temp1
0006b2 9360 0200                 	sts SecondCounter, temp1 		; initialise second counter to 0
0006b4 9360 0201                 	sts SecondCounter + 1, temp1
0006b6 e061                      	ldi temp1, 1 << TOIE0 	; enable timer
0006b7 9360 006e                 	sts TIMSK0, temp1
                                 	
0006b9 2788                      	clr r24
0006ba 2799                      	clr r25
                                 
0006bb 916f                      	pop temp1
0006bc 9508                      	ret
                                 
                                 increment_secondpassed:
0006bd 935f                      	push temp
0006be 936f                      	push temp1
0006bf 9150 027c                 	lds temp, monorail_stop_move
0006c1 3052                      	cpi temp, 2 ; 2 MEANS STOPPED BETWEEN SO DONT ADD
0006c2 f029                      	breq secondpassed_epilogue
0006c3 9150 027d                 	lds temp, thirdofsecond_passed
0006c5 9553                      	inc temp
0006c6 9350 027d                 	sts thirdofsecond_passed, temp
                                 secondpassed_epilogue:
0006c8 d0a7                      	rcall convert_to_seconds
0006c9 916f                      	pop temp1
0006ca 915f                      	pop temp
0006cb 9508                      	ret
                                 
                                 check_order_stop:
0006cc 935f                      	push temp
0006cd 936f                      	push temp1
0006ce 9150 0280                 	lds temp, order_to_stop
0006d0 3052                      	cpi temp, 2 ; 2 MEANS MOVE ORDER
0006d1 f021                      	breq order_start_moving_again
0006d2 3051                      	cpi temp, 1 ; ORDERED TO STOP
0006d3 f029                      	breq order_stop_initiate
                                 	; NO ORDER OTHERWISE 0 
0006d4 940c 06da                 	jmp check_order_stop_epilogue
                                 order_start_moving_again:
0006d6 d033                      	rcall start_moving_again_variable
0006d7 940c 06da                 	jmp check_order_stop_epilogue
                                 order_stop_initiate:
0006d9 d003                      	rcall check_order_stop_initiate
                                 check_order_stop_epilogue:
0006da 916f                      	pop temp1
0006db 915f                      	pop temp
0006dc 9508                      	ret	
                                 	
                                 check_order_stop_initiate: ; ORDERED TO STOP 
0006dd 935f                      	push temp
0006de 936f                      	push temp1
0006df 934f                      	push temp2
0006e0 2766                      	clr temp1
0006e1 9150 027d                 	lds temp, thirdofsecond_passed
                                 loop_full_second: ; CHECK SECONDS
0006e3 3053                      	cpi temp, 3
0006e4 f020                      	brlo check_second_finish ; SECOND INTERVAL
0006e5 5053                      	subi temp, 3
0006e6 9563                      	inc temp1 ; THIS WILL HAVE SECOND
0006e7 940c 06e3                 	jmp loop_full_second
                                 check_second_finish:
0006e9 3050                      	cpi temp, 0 ; TEMP HOLDS REMAINER
0006ea f011                      	breq check_next_sec_station ; IF SECOND IT CAN STOP if not arrive at next station
0006eb 940c 06f9                 	jmp check_order_stop_initiate_epilogue ; MEANS NOT SECOND INTERVAL CHECK LATER
                                 check_next_sec_station:
                                 	; CHECK IF NEXT SECOND IS NEXT STATION
0006ed 9140 027f                 	lds temp2, currtime_to_nextstation
0006ef 1764                      	cp temp1, temp2 ;SECONDS PASSED VS CURR TIME TO NEXT
0006f0 f010                      	brlo order_monorail_to_stop ; IF LOWER CAN STOP
0006f1 940c 06f6                 	jmp next_sec_station_reset	
                                 order_monorail_to_stop:
0006f3 d009                      	rcall stop_between_variable
0006f4 940c 06f9                 	jmp check_order_stop_initiate_epilogue
                                 next_sec_station_reset:
0006f6 2755                      	clr temp
0006f7 9350 0280                 	sts order_to_stop, temp ; THE ORDER IS VOID BECAUSE NEXT STATION ALREADY REACHED
                                 check_order_stop_initiate_epilogue:
0006f9 914f                      	pop temp2
0006fa 916f                      	pop temp1
0006fb 915f                      	pop temp
0006fc 9508                      	ret
                                 
                                 stop_between_variable:
0006fd 935f                      	push temp
0006fe 936f                      	push temp1
0006ff 2755                      	clr temp
000700 9350 027a                 	sts targetRPS, temp ; TRPS 0
000702 9350 0280                 	sts order_to_stop, temp ; NO ORDER ANYMORE
000704 e052                      	ldi temp, 2
000705 9350 027c                 	sts monorail_stop_move, temp ; 2 MEANS STOPPED BETWEEN
                                 	; UPDATE CURRTIME_TO_NEXT_STATION
                                 	; CURRTIME = CURRTIME - SECOND_PASSED
                                 	;lds temp, currtime_to_nextstation
                                 	;lds temp1, seconds_passed
                                 	;sub temp, temp1
                                 	;sts currtime_to_nextstation, temp
000707 916f                      	pop temp1
000708 915f                      	pop temp
000709 9508                      	ret
                                 
                                 start_moving_again_variable:
00070a 935f                      	push temp
00070b e35c                      	ldi temp, 60
00070c 9350 027a                 	sts targetRPS, temp
00070e e051                      	ldi temp, 1
00070f 9350 027c                 	sts monorail_stop_move, temp ; 1 MEANS MOVING AGAIN
000711 2755                      	clr temp
000712 9350 0280                 	sts order_to_stop, temp ; NO ORDER ANYMORE
000714 915f                      	pop temp
000715 9508                      	ret
                                 
                                 stop_station: ; CHECK IF STOPPED AT STATION
000716 935f                      	push temp
000717 9150 027c                 	lds temp, monorail_stop_move
000719 3051                      	cpi temp, 1 ; 1 MEANS MOVING
00071a f0a9                      	breq stop_station_epilogue
00071b 3052                      	cpi temp, 2 ; 2 MEANS BETWEEN STATIONS
00071c f099                      	breq stop_station_epilogue
00071d 9150 0274                 	lds temp, time_stop ; ELSE IT IS 0 and STOPPED
00071f 9160 027e                 	lds temp1, seconds_passed
000721 1756                      	cp temp, temp1
000722 f011                      	breq stop_ended
000723 940c 0730                 	jmp stop_station_epilogue
                                 stop_ended:
000725 e35c                      	ldi temp, 60
000726 9350 027a                 	sts targetRPS, temp
000728 e051                      	ldi temp, 1
000729 9350 027c                 	sts monorail_stop_move, temp ; MOVING
00072b 2755                      	clr temp
00072c 9350 027d                 	sts thirdofsecond_passed, temp
00072e 9350 027e                 	sts seconds_passed, temp
                                 stop_station_epilogue:
000730 915f                      	pop temp
000731 9508                      	ret
                                 
                                 update_station:
000732 935f                      	push temp
000733 936f                      	push temp1
000734 9150 027c                 	lds temp, monorail_stop_move ; IF STOPPED IGNORE
000736 3050                      	cpi temp, 0
000737 f121                      	breq update_station_epilogue
000738 3052                      	cpi temp, 2 ; IF STOPPED BETWEEN STATIONS IGNORE
000739 f111                      	breq update_station_epilogue
                                 check_reach_station:
00073a 9150 027f                 	lds temp, currtime_to_nextstation
00073c 9160 027e                 	lds temp1, seconds_passed
00073e 1765                      	cp temp1, temp
00073f f011                      	breq station_reached
000740 940c 075c                 	jmp update_station_epilogue
                                 station_reached:
                                 	; UPDATE NEXT STATION
000742 d01c                      	rcall update_next_station
000743 2755                      	clr temp
000744 9350 027c                 	sts monorail_stop_move, temp ; MONORAIL STOP
000746 9350 027d                 	sts thirdofsecond_passed, temp
000748 9350 027e                 	sts seconds_passed, temp
00074a d037                      	rcall update_station_time ; will update curr time to next station later
                                 	; UPDATE TOURIST
00074b 9150 0275                 	lds temp, tourist_on
00074d 9160 0277                 	lds temp1, tourist_count
00074f 0f65                      	add temp1, temp
000750 9150 0276                 	lds temp, tourist_off
000752 1b65                      	sub temp1, temp
000753 9360 0277                 	sts tourist_count, temp1
000755 2755                      	clr temp
000756 9350 0275                 	sts tourist_on, temp
000758 9350 0276                 	sts tourist_off, temp
                                 	; MAKE MOTOR STOP
00075a 9350 027a                 	sts targetRPS, temp
                                 update_station_epilogue:
00075c 916f                      	pop temp1
00075d 915f                      	pop temp
00075e 9508                      	ret
                                 
                                 update_next_station:
00075f 935f                      	push temp
000760 936f                      	push temp1
000761 9150 027b                 	lds temp, next_station
000763 9160 0205                 	lds temp1, num_stations
000765 1756                      	cp temp, temp1 ; IF NEXT_STATION IS ALREADY LAST MAKE FIRST
000766 f019                      	breq next_is_first
000767 9553                      	inc temp
000768 940c 076b                 	jmp update_next_station_epilogue
                                 next_is_first:
00076a e051                      	ldi temp, 1
                                 update_next_station_epilogue:
00076b 9350 027b                 	sts next_station, temp
00076d 916f                      	pop temp1
00076e 915f                      	pop temp
00076f 9508                      	ret
                                 
                                 convert_to_seconds:
000770 935f                      	push temp
000771 936f                      	push temp1
000772 2766                      	clr temp1
000773 9150 027d                 	lds temp, thirdofsecond_passed
000775 3053                      	cpi temp, 3
000776 f030                      	brlo seconds_epilogue
                                 find_seconds:
000777 5053                      	subi temp, 3
000778 9563                      	inc temp1 ; temp1 holds seconds
000779 3053                      	cpi temp, 3
00077a f010                      	brlo seconds_epilogue
00077b 940c 0777                 	jmp find_seconds	
                                 seconds_epilogue:
00077d 9360 027e                 	sts seconds_passed, temp1
00077f 916f                      	pop temp1
000780 915f                      	pop temp
000781 9508                      	ret
                                 
                                 
                                 update_station_time:
000782 935f                      	push temp
000783 936f                      	push temp1
000784 9150 027b                 	lds temp, next_station ; This is real number e.g. initially it will be 1
                                 
000786 9160 0205                 	lds temp1, num_stations 
000788 1756                      	cp temp, temp1
000789 f049                      	breq update_station_time_last
                                 
00078a e6ca                      	ldi yl, low(time_travel)
00078b e0d2                      	ldi yh, high(time_travel)
                                 	
00078c e061                      	ldi temp1, 1
                                 update_station_time_loop:
00078d 9109                      	ld outp, y+
00078e 1765                      	cp temp1, temp
00078f f031                      	breq update_station_time_done
000790 9563                      	inc temp1
000791 940c 078d                 	jmp update_station_time_loop
                                 
                                 update_station_time_last:
000793 e7c3                      	ldi yl, low(time_travel) + 9
000794 e0db                      	ldi yh, high(time_travel) + 9
000795 8108                      	ld outp, y
                                 update_station_time_done:
000796 9300 027f                 	sts	currtime_to_nextstation, outp; INSERT THE VALUE FOUND
                                 
000798 916f                      	pop temp1
000799 915f                      	pop temp
                                 .include "sysconfig_test.asm"
00079a 9508                      
                                 ; To print out # of Station
                                 ; STATION
                                 ; STATION
                                 ; STATION
                                 ; STATION
                                 ; STATION
                                 ; Then
                                 ; STATION1 to STATION 2: #second
                                 ; ...
                                 ; STATIONFINAL to STATION 1
                                 ; STOP TIME: # second
                                 
                                 demo_test:
00079b d06e                      	rcall print_stations ; Prints # Stations: (nextline) station 5s station 5s ...
00079c d020                      	rcall print_traveltime
00079d d05a                      	rcall print_stoptime
00079e d001                      	rcall pass_demotest
00079f 9508                      	ret
                                 
                                 pass_demotest:
0007a0 d242                      	rcall lcd_pressanykey_placeholder
0007a1 dd7e                      	rcall keypad_scan
0007a2 d0b4                      	rcall emulation_countdown
0007a3 9508                      	ret
                                 
                                 ; FIX PRINT STATION (PASSING temp2 VALUE) 
                                 ; If pass 1 PRINT IN LCD timetravel byte 1 (e.g. station 1-2)
                                 ; is pass 2 print in LCD timetravel BYTE 2 (e.g. station 2-3)
                                 ; ... up to last - station 1
                                 print_traveltime_help: ;temp2 holds stationnumber (e.g. 1 means 1-2)
0007a4 930f                      	push outp
0007a5 936f                      	push temp1
0007a6 935f                      	push temp
                                 
0007a7 9160 0205                 	lds temp1, num_stations 
0007a9 1746                      	cp temp2, temp1
0007aa f049                      	breq print_traveltime_help_last
                                 
0007ab e6ca                      	ldi yl, low(time_travel)
0007ac e0d2                      	ldi yh, high(time_travel)
                                 
0007ad e061                      	ldi temp1, 1
                                 print_traveltime_loop_help:
0007ae 9109                      	ld outp, y+
0007af 1764                      	cp temp1, temp2
0007b0 f031                      	breq print_traveltime_done_help
0007b1 9563                      	inc temp1
0007b2 940c 07ae                 	jmp print_traveltime_loop_help
                                 print_traveltime_help_last:
0007b4 e7c3                      	ldi yl, low(time_travel) + 9
0007b5 e0db                      	ldi yh, high(time_travel) + 9
0007b6 8108                      	ld outp, y
                                 print_traveltime_done_help:	
                                 	;subi outp, -48
                                 	;do_lcd_data_reg outp
0007b7 2f50                      	mov temp, outp
0007b8 dce8                      	rcall write_two_digit
0007b9 915f                      	pop temp
0007ba 916f                      	pop temp1
0007bb 910f                      	pop outp
0007bc 9508                      	ret
                                 
                                 ; FUNCTION END HERE
                                 
                                 print_traveltime:
0007bd 935f                      	push temp
0007be 936f                      	push temp1
0007bf 934f                      	push temp2
0007c0 2744                      	clr temp2
                                 loop_traveltime:
0007c1 9150 0205                 	lds temp, num_stations
0007c3 1745                      	cp temp2, temp
0007c4 f179                      	breq finish_traveltime 
                                 	
                                 	; TRAVEL TIME (NEWLINE) STATION #-#+1
0007c5 d0b4                      	rcall print_traveltime_initialisation
                                 
                                 	; Prints Station # to Station #+1
0007c6 e001
0007c7 dcee
0007c8 dcfd                      	do_lcd_command LCD_DISP_CLR
0007c9 e800
0007ca dceb
0007cb dcfa                      	do_lcd_command LCD_HOME_LINE
0007cc d067                      	rcall print_station_help ; THIS PRINT STATION (TEMP2 STARTS AT 0)
0007cd e200
0007ce dcee
0007cf dcf6                      	do_lcd_data ' '
0007d0 e704
0007d1 dceb
0007d2 dcf3                      	do_lcd_data 't'
0007d3 e60f
0007d4 dce8
0007d5 dcf0                      	do_lcd_data 'o'
0007d6 e200
0007d7 dce5
0007d8 dced                      	do_lcd_data ' '
0007d9 ea08
0007da dcdb
0007db dcea                      	do_lcd_command LCD_SEC_LINE
0007dc 9543                      	inc temp2
0007dd d056                      	rcall print_station_help
0007de e30a
0007df dcdd
0007e0 dce5                      	do_lcd_data ':'
                                 	;do_lcd_data ' ' ;12
                                 	; GRAB TIME
0007e1 dfc2                      	rcall print_traveltime_help
0007e2 e703
0007e3 dcd9
0007e4 dce1                      	do_lcd_data 's'
0007e5 e605
0007e6 dcd6
0007e7 dcde                      	do_lcd_data 'e'
0007e8 e603
0007e9 dcd3
0007ea dcdb                      	do_lcd_data 'c' ;16
0007eb dd08                      	rcall sleep_5000ms
0007ec e001
0007ed dcc8
0007ee dcd7                      	do_lcd_command LCD_DISP_CLR
0007ef e800
0007f0 dcc5
0007f1 dcd4                      	do_lcd_command LCD_HOME_LINE
0007f2 940c 07c1                 	jmp loop_traveltime
                                 finish_traveltime:
0007f4 914f                      	pop temp2
0007f5 916f                      	pop temp1
0007f6 915f                      	pop temp
0007f7 9508                      	ret
                                 
                                 print_stoptime:
0007f8 935f                      	push temp
0007f9 d198                      	rcall lcd_stoptime_placeholder
0007fa ea08
0007fb dcba
0007fc dcc9                      	do_lcd_command LCD_SEC_LINE
0007fd 9150 0274                 	lds temp, time_stop
0007ff 5d50                      	subi temp, -48
000800 2f05
000801 dcbb
000802 dcc3                      	do_lcd_data_reg temp
000803 d1c6                      	rcall lcd_seconds_placeholder
000804 dcef                      	rcall sleep_5000ms
000805 e001
000806 dcaf
000807 dcbe                      	do_lcd_command LCD_DISP_CLR
000808 915f                      	pop temp
000809 9508                      	ret
                                 
                                 print_stations:
00080a 935f                      	push temp
00080b 936f                      	push temp1
00080c 934f                      	push temp2
00080d 2744                      	clr temp2
                                 loop_num_stations:
00080e 9150 0205                 	lds temp, num_stations
000810 1745                      	cp temp2, temp
000811 f0f1                      	breq finish_print_station ;
000812 d093                      	rcall num_station_to_word ; This prints "# STATIONS:" FIRST LINE
000813 ea08
000814 dca1
000815 dcb0                      	do_lcd_command LCD_SEC_LINE ; NEW LINE
                                 	; Get station number printing in keypad form
000816 2f64                      	mov temp1, temp2
000817 9563                      	inc temp1
000818 5d60                      	subi temp1, -48
000819 2f06
00081a dca2
00081b dcaa                      	do_lcd_data_reg temp1
00081c e200
00081d dc9f
00081e dca7                      	do_lcd_data ' '
00081f e20d
000820 dc9c
000821 dca4                      	do_lcd_data '-'
000822 e200
000823 dc99
000824 dca1                      	do_lcd_data ' '
000825 d00e                      	rcall print_station_help ; THIS PRINT STATION (TEMP2 STARTS AT 0)
000826 dccd                      	rcall sleep_5000ms
000827 e001
000828 dc8d
000829 dc9c                      	do_lcd_command LCD_DISP_CLR
00082a e800
00082b dc8a
00082c dc99                      	do_lcd_command LCD_HOME_LINE	
00082d 9543                      	inc temp2
00082e 940c 080e                 	jmp loop_num_stations
                                 finish_print_station:
000830 914f                      	pop temp2
000831 916f                      	pop temp1
000832 915f                      	pop temp
000833 9508                      	ret
                                 
                                 print_station_help: ;temp2 holds stationnumber-1
000834 930f                      	push outp
000835 936f                      	push temp1
000836 937f                      	push temp3
                                 
000837 9160 0205                 	lds temp1, num_stations
000839 1746                      	cp temp2, temp1
00083a f061                      	breq print_station_help_back_to_first
                                 
00083b 2f74                      	mov temp3, temp2
00083c e06a                      	ldi temp1, 10
00083d 9f76                      	mul temp3, temp1
00083e 2dc0                      	mov YL, r0
00083f 27dd                      	clr YH
000840 e066                      	ldi temp1, low(station_names)
000841 0fc6                      	add YL, temp1
000842 e062                      	ldi temp1, high(station_names)
000843 1fd6                      	adc YH, temp1
                                 
000844 e060                      	ldi temp1, 0
000845 940c 084a                 	jmp print_station_loop_help
                                 
                                 print_station_help_back_to_first:
000847 e0c6                      	ldi YL,  low(station_names)
000848 e0d2                      	ldi Yh, high(station_names)
                                 
000849 e060                      	ldi temp1, 0
                                 print_station_loop_help:
00084a 306a                      	cpi temp1, 10
00084b f039                      	breq print_station_done_help
00084c 9109                      	ld outp, Y+
00084d 2f00
00084e dc6e
00084f dc76                      	do_lcd_data_reg outp
000850 9563                      	inc temp1
000851 940c 084a                 	jmp print_station_loop_help
                                 print_station_done_help:
000853 917f                      	pop temp3
000854 916f                      	pop temp1
000855 910f                      	pop outp
000856 9508                      	ret
                                 
                                 
                                 emulation_countdown:
000857 935f                      	push temp
000858 936f                      	push temp1
000859 e001
00085a dc5b
00085b dc6a                      	do_lcd_command LCD_DISP_CLR
00085c d1cf                      	rcall lcd_startemulation_placeholder
00085d e301
00085e dc5e
00085f dc66                      	do_lcd_data '1'
000860 e300
000861 dc5b
000862 dc63                      	do_lcd_data '0'
000863 dc88                      	rcall sleep_1000ms
000864 e001
000865 dc50
000866 dc5f                      	do_lcd_command LCD_DISP_CLR
000867 e059                      	ldi temp, 9
                                 countdownloop:
000868 3050                      	cpi temp, 0
000869 f069                      	breq countdown_finish
00086a d1c1                      	rcall lcd_startemulation_placeholder
00086b 2f65                      	mov temp1, temp
00086c 5d60                      	subi temp1, -48
00086d 2f06
00086e dc4e
00086f dc56                      	do_lcd_data_reg temp1
000870 dc7b                      	rcall sleep_1000ms
000871 e001
000872 dc43
000873 dc52                      	do_lcd_command LCD_DISP_CLR
000874 955a                      	dec temp
000875 940c 0868                 	jmp countdownloop
                                 countdown_finish:
000877 916f                      	pop temp1
000878 915f                      	pop temp
000879 9508                      	ret
                                 
                                 print_traveltime_initialisation:
00087a 936f                      	push temp1
00087b 934f                      	push temp2
00087c 937f                      	push temp3
00087d d0ef                      	rcall lcd_traveltime_placeholder ; This prints "Travel time:" FIRST LINE
00087e ea08
00087f dc36
000880 dc45                      	do_lcd_command LCD_SEC_LINE ; NEW LINE
000881 d12f                      	rcall lcd_station_placeholder2
000882 2f64                      	mov temp1, temp2 ; Get station number printing in keypad form
000883 9563                      	inc temp1
000884 5d60                      	subi temp1, -48
000885 2f06
000886 dc36
000887 dc3e                      	do_lcd_data_reg temp1
000888 e200
000889 dc33
00088a dc3b                      	do_lcd_data ' '
00088b e704
00088c dc30
00088d dc38                      	do_lcd_data 't'
00088e e60f
00088f dc2d
000890 dc35                      	do_lcd_data 'o'
000891 e200
000892 dc2a
000893 dc32                      	do_lcd_data ' '
000894 2f64                      	mov temp1, temp2 ; Get station number printing in keypad form
000895 9563                      	inc temp1
000896 9563                      	inc temp1
                                 
000897 9170 0205                 	lds temp3, num_stations
000899 9573                      	inc temp3
00089a 1767                      	cp temp1, temp3
00089b f409                      	brne print_traveltime_initialisation_not_on_last
00089c e061                      	ldi temp1, 1 ;loop back from last station to first
                                 
                                 print_traveltime_initialisation_not_on_last:
00089d 5d60                      	subi temp1, -48
00089e 2f06
00089f dc1d
0008a0 dc25                      	do_lcd_data_reg temp1
0008a1 dc52                      	rcall sleep_5000ms
0008a2 917f                      	pop temp3
0008a3 914f                      	pop temp2
0008a4 916f                      	pop temp1
0008a5 9508                      	ret
                                 
                                 num_station_to_word:
0008a6 935f                      	push temp
0008a7 9150 0205                 	lds temp, num_stations
0008a9 3052                      	cpi temp, 2
0008aa f081                      	breq two_to_word
0008ab 3053                      	cpi temp, 3
0008ac f089                      	breq three_to_word
0008ad 3054                      	cpi temp, 4
0008ae f091                      	breq four_to_word
0008af 3055                      	cpi temp, 5
0008b0 f099                      	breq five_to_word
0008b1 3056                      	cpi temp, 6
0008b2 f0a1                      	breq six_to_word
0008b3 3057                      	cpi temp, 7
0008b4 f0a9                      	breq seven_to_word
0008b5 3058                      	cpi temp, 8
0008b6 f0b1                      	breq eight_to_word
0008b7 3059                      	cpi temp, 9
0008b8 f0b9                      	breq nine_to_word
0008b9 305a                      	cpi temp, 10
0008ba f0c1                      	breq ten_to_word
                                 two_to_word:
0008bb d01d                      	rcall lcd_two
0008bc 940c 08d6                 	jmp num_station_to_word_epilogue
                                 three_to_word:
0008be d024                      	rcall lcd_three
0008bf 940c 08d6                 	jmp num_station_to_word_epilogue
                                 four_to_word:
0008c1 d031                      	rcall lcd_four
0008c2 940c 08d6                 	jmp num_station_to_word_epilogue
                                 five_to_word:
0008c4 d03b                      	rcall lcd_five
0008c5 940c 08d6                 	jmp num_station_to_word_epilogue
                                 six_to_word:
0008c7 d045                      	rcall lcd_six
0008c8 940c 08d6                 	jmp num_station_to_word_epilogue
                                 seven_to_word:
0008ca d04c                      	rcall lcd_seven
0008cb 940c 08d6                 	jmp num_station_to_word_epilogue
                                 eight_to_word:
0008cd d059                      	rcall lcd_eight
0008ce 940c 08d6                 	jmp num_station_to_word_epilogue
                                 nine_to_word:
0008d0 d066                      	rcall lcd_nine
0008d1 940c 08d6                 	jmp num_station_to_word_epilogue
                                 ten_to_word:
0008d3 d070                      	rcall lcd_ten
0008d4 940c 08d6                 	jmp num_station_to_word_epilogue
                                 num_station_to_word_epilogue:
0008d6 d077                      	rcall lcd_station_placeholder
0008d7 915f                      	pop temp
0008d8 9508                      	ret
                                 
                                 lcd_two:
0008d9 e504
0008da dbe2
0008db dbea                      	do_lcd_data 'T'
0008dc e707
0008dd dbdf
0008de dbe7                      	do_lcd_data 'w'
0008df e60f
0008e0 dbdc
0008e1 dbe4                      	do_lcd_data 'o'
0008e2 9508                      	ret
                                 lcd_three:
0008e3 e504
0008e4 dbd8
0008e5 dbe0                      	do_lcd_data 'T'
0008e6 e608
0008e7 dbd5
0008e8 dbdd                      	do_lcd_data 'h'
0008e9 e702
0008ea dbd2
0008eb dbda                      	do_lcd_data 'r'
0008ec e605
0008ed dbcf
0008ee dbd7                      	do_lcd_data 'e'
0008ef e605
0008f0 dbcc
0008f1 dbd4                      	do_lcd_data 'e'
0008f2 9508                      	ret
                                 lcd_four:
0008f3 e406
0008f4 dbc8
0008f5 dbd0                      	do_lcd_data 'F'
0008f6 e60f
0008f7 dbc5
0008f8 dbcd                      	do_lcd_data 'o'
0008f9 e705
0008fa dbc2
0008fb dbca                      	do_lcd_data 'u'
0008fc e702
0008fd dbbf
0008fe dbc7                      	do_lcd_data 'r'
0008ff 9508                      	ret
                                 lcd_five:
000900 e406
000901 dbbb
000902 dbc3                      	do_lcd_data 'F'
000903 e609
000904 dbb8
000905 dbc0                      	do_lcd_data 'i'
000906 e706
000907 dbb5
000908 dbbd                      	do_lcd_data 'v'
000909 e605
00090a dbb2
00090b dbba                      	do_lcd_data 'e'
00090c 9508                      	ret
                                 lcd_six:
00090d e503
00090e dbae
00090f dbb6                      	do_lcd_data 'S'
000910 e609
000911 dbab
000912 dbb3                      	do_lcd_data 'i'
000913 e708
000914 dba8
000915 dbb0                      	do_lcd_data 'x'
000916 9508                      	ret
                                 lcd_seven:
000917 e503
000918 dba4
000919 dbac                      	do_lcd_data 'S'
00091a e605
00091b dba1
00091c dba9                      	do_lcd_data 'e'
00091d e706
00091e db9e
00091f dba6                      	do_lcd_data 'v'
000920 e605
000921 db9b
000922 dba3                      	do_lcd_data 'e'
000923 e60e
000924 db98
000925 dba0                      	do_lcd_data 'n'
000926 9508                      	ret
                                 lcd_eight:
000927 e405
000928 db94
000929 db9c                      	do_lcd_data 'E'
00092a e609
00092b db91
00092c db99                      	do_lcd_data 'i'
00092d e607
00092e db8e
00092f db96                      	do_lcd_data 'g'
000930 e608
000931 db8b
000932 db93                      	do_lcd_data 'h'
000933 e704
000934 db88
000935 db90                      	do_lcd_data 't'
000936 9508                      	ret
                                 lcd_nine:
000937 e40e
000938 db84
000939 db8c                      	do_lcd_data 'N'
00093a e609
00093b db81
00093c db89                      	do_lcd_data 'i'
00093d e60e
00093e db7e
00093f db86                      	do_lcd_data 'n'
000940 e605
000941 db7b
000942 db83                      	do_lcd_data 'e'
000943 9508                      	ret
                                 lcd_ten:
000944 e504
000945 db77
000946 db7f                      	do_lcd_data 'T'
000947 e605
000948 db74
000949 db7c                      	do_lcd_data 'e'
00094a e60e
00094b db71
00094c db79                      	do_lcd_data 'n'
00094d 9508                      	ret
                                 
                                 lcd_station_placeholder:
00094e e200
00094f db6d
000950 db75                      	do_lcd_data ' '
000951 e703
000952 db6a
000953 db72                      	do_lcd_data 's'
000954 e704
000955 db67
000956 db6f                      	do_lcd_data 't'
000957 e601
000958 db64
000959 db6c                      	do_lcd_data 'a'
00095a e704
00095b db61
00095c db69                      	do_lcd_data 't'
00095d e609
00095e db5e
00095f db66                      	do_lcd_data 'i'
000960 e60f
000961 db5b
000962 db63                      	do_lcd_data 'o'
000963 e60e
000964 db58
000965 db60                      	do_lcd_data 'n'
000966 e703
000967 db55
000968 db5d                      	do_lcd_data 's'
000969 e30a
00096a db52
00096b db5a                      	do_lcd_data ':'
00096c 9508                      	ret
                                 
                                 lcd_traveltime_placeholder:
00096d e504
00096e db4e
00096f db56                      	do_lcd_data 'T'
000970 e702
000971 db4b
000972 db53                      	do_lcd_data 'r'
000973 e601
000974 db48
000975 db50                      	do_lcd_data 'a'
000976 e706
000977 db45
000978 db4d                      	do_lcd_data 'v'
000979 e605
00097a db42
00097b db4a                      	do_lcd_data 'e'
00097c e60c
00097d db3f
00097e db47                      	do_lcd_data 'l'
00097f e200
000980 db3c
000981 db44                      	do_lcd_data ' '
000982 e704
000983 db39
000984 db41                      	do_lcd_data 't'
000985 e609
000986 db36
000987 db3e                      	do_lcd_data 'i'
000988 e60d
000989 db33
00098a db3b                      	do_lcd_data 'm'
00098b e605
00098c db30
00098d db38                      	do_lcd_data 'e'
00098e e30a
00098f db2d
000990 db35                      	do_lcd_data ':'
000991 9508                      	ret
                                 
                                 
                                 lcd_stoptime_placeholder:
000992 e503
000993 db29
000994 db31                      	do_lcd_data 'S'
000995 e704
000996 db26
000997 db2e                      	do_lcd_data 't'
000998 e60f
000999 db23
00099a db2b                      	do_lcd_data 'o'
00099b e700
00099c db20
00099d db28                      	do_lcd_data 'p'
00099e e200
00099f db1d
0009a0 db25                      	do_lcd_data ' '
0009a1 e704
0009a2 db1a
0009a3 db22                      	do_lcd_data 't'
0009a4 e609
0009a5 db17
0009a6 db1f                      	do_lcd_data 'i'
0009a7 e60d
0009a8 db14
0009a9 db1c                      	do_lcd_data 'm'
0009aa e605
0009ab db11
0009ac db19                      	do_lcd_data 'e'
0009ad e30a
0009ae db0e
0009af db16                      	do_lcd_data ':'
0009b0 9508                      	ret
                                 
                                 lcd_station_placeholder2:
0009b1 e703
0009b2 db0a
0009b3 db12                      	do_lcd_data 's'
0009b4 e704
0009b5 db07
0009b6 db0f                      	do_lcd_data 't'
0009b7 e601
0009b8 db04
0009b9 db0c                      	do_lcd_data 'a'
0009ba e704
0009bb db01
0009bc db09                      	do_lcd_data 't'
0009bd e609
0009be dafe
0009bf db06                      	do_lcd_data 'i'
0009c0 e60f
0009c1 dafb
0009c2 db03                      	do_lcd_data 'o'
0009c3 e60e
0009c4 daf8
0009c5 db00                      	do_lcd_data 'n'
0009c6 e200
0009c7 daf5
0009c8 dafd                      	do_lcd_data ' '
0009c9 9508                      	ret
                                 
                                 lcd_seconds_placeholder:
0009ca e200
0009cb daf1
0009cc daf9                      	do_lcd_data ' '
0009cd e703
0009ce daee
0009cf daf6                      	do_lcd_data 's'
0009d0 e605
0009d1 daeb
0009d2 daf3                      	do_lcd_data 'e'
0009d3 e603
0009d4 dae8
0009d5 daf0                      	do_lcd_data 'c'
0009d6 e60f
0009d7 dae5
0009d8 daed                      	do_lcd_data 'o'
0009d9 e60e
0009da dae2
0009db daea                      	do_lcd_data 'n'
0009dc e604
0009dd dadf
0009de dae7                      	do_lcd_data 'd'
0009df e703
0009e0 dadc
0009e1 dae4                      	do_lcd_data 's'
0009e2 9508                      	ret	
                                 
                                 lcd_pressanykey_placeholder:
0009e3 e500
0009e4 dad8
0009e5 dae0                      	do_lcd_data 'P'
0009e6 e702
0009e7 dad5
0009e8 dadd                      	do_lcd_data 'r'
0009e9 e605
0009ea dad2
0009eb dada                      	do_lcd_data 'e'
0009ec e703
0009ed dacf
0009ee dad7                      	do_lcd_data 's' ;4
0009ef e703
0009f0 dacc
0009f1 dad4                      	do_lcd_data 's'
0009f2 e200
0009f3 dac9
0009f4 dad1                      	do_lcd_data ' '
0009f5 e601
0009f6 dac6
0009f7 dace                      	do_lcd_data 'a'
0009f8 e60e
0009f9 dac3
0009fa dacb                      	do_lcd_data 'n' ;4
0009fb e709
0009fc dac0
0009fd dac8                      	do_lcd_data 'y'
0009fe e200
0009ff dabd
000a00 dac5                      	do_lcd_data ' '
000a01 e60b
000a02 daba
000a03 dac2                      	do_lcd_data 'k'
000a04 e605
000a05 dab7
000a06 dabf                      	do_lcd_data 'e' ;4
000a07 e709
000a08 dab4
000a09 dabc                      	do_lcd_data 'y'
000a0a e200
000a0b dab1
000a0c dab9                      	do_lcd_data ' '
000a0d e704
000a0e daae
000a0f dab6                      	do_lcd_data 't'
000a10 e60f
000a11 daab
000a12 dab3                      	do_lcd_data 'o' ;4
000a13 ea08
000a14 daa1
000a15 dab0                      	do_lcd_command LCD_SEC_LINE
000a16 e603
000a17 daa5
000a18 daad                      	do_lcd_data 'c'
000a19 e60f
000a1a daa2
000a1b daaa                      	do_lcd_data 'o'
000a1c e60e
000a1d da9f
000a1e daa7                      	do_lcd_data 'n'
000a1f e606
000a20 da9c
000a21 daa4                      	do_lcd_data 'f' ;4
000a22 e609
000a23 da99
000a24 daa1                      	do_lcd_data 'i'
000a25 e702
000a26 da96
000a27 da9e                      	do_lcd_data 'r'
000a28 e60d
000a29 da93
000a2a da9b                      	do_lcd_data 'm'
000a2b 9508                      	ret	
                                 
                                 lcd_startemulation_placeholder:
000a2c e40d
000a2d da8f
000a2e da97                      	do_lcd_data 'M'
000a2f e60f
000a30 da8c
000a31 da94                      	do_lcd_data 'o'
000a32 e60e
000a33 da89
000a34 da91                      	do_lcd_data 'n'
000a35 e60f
000a36 da86
000a37 da8e                      	do_lcd_data 'o' ;4
000a38 e702
000a39 da83
000a3a da8b                      	do_lcd_data 'r'
000a3b e601
000a3c da80
000a3d da88                      	do_lcd_data 'a'
000a3e e609
000a3f da7d
000a40 da85                      	do_lcd_data 'i'
000a41 e60c
000a42 da7a
000a43 da82                      	do_lcd_data 'l' ;4
000a44 e200
000a45 da77
000a46 da7f                      	do_lcd_data ' '
000a47 e703
000a48 da74
000a49 da7c                      	do_lcd_data 's'
000a4a e704
000a4b da71
000a4c da79                      	do_lcd_data 't'
000a4d e601
000a4e da6e
000a4f da76                      	do_lcd_data 'a' ;4
000a50 e702
000a51 da6b
000a52 da73                      	do_lcd_data 'r'
000a53 e704
000a54 da68
000a55 da70                      	do_lcd_data 't'
000a56 e703
000a57 da65
000a58 da6d                      	do_lcd_data 's'
000a59 ea08
000a5a da5b
000a5b da6a                      	do_lcd_command LCD_SEC_LINE
000a5c e605
000a5d da5f
000a5e da67                      	do_lcd_data 'e'
000a5f e60d
000a60 da5c
000a61 da64                      	do_lcd_data 'm'
000a62 e705
000a63 da59
000a64 da61                      	do_lcd_data 'u'
000a65 e60c
000a66 da56
000a67 da5e                      	do_lcd_data 'l' ;4
000a68 e601
000a69 da53
000a6a da5b                      	do_lcd_data 'a'
000a6b e704
000a6c da50
000a6d da58                      	do_lcd_data 't'
000a6e e609
000a6f da4d
000a70 da55                      	do_lcd_data 'i'
000a71 e60f
000a72 da4a
000a73 da52                      	do_lcd_data 'o' ;4
000a74 e60e
000a75 da47
000a76 da4f                      	do_lcd_data 'n'
000a77 e200
000a78 da44
000a79 da4c                      	do_lcd_data ' '
000a7a e609
000a7b da41
000a7c da49                      	do_lcd_data 'i'
000a7d e60e
000a7e da3e
000a7f da46                      	do_lcd_data 'n' ;4
000a80 e200
000a81 da3b
000a82 da43                      	do_lcd_data ' '


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega2560" register use summary:
x  :   0 y  :  14 z  :   0 r0 :   8 r1 :   3 r2 :   0 r3 :   0 r4 :   0 
r5 :   0 r6 :   0 r7 :   0 r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   0 r14:   0 r15:   0 r16: 525 r17:   6 r18:   7 r19:   7 r20:  60 
r21: 241 r22: 258 r23:  23 r24:  58 r25:  20 r26:   0 r27:   0 r28:  19 
r29:  19 r30:   0 r31:   0 
Registers used: 15 out of 35 (42.9%)

"ATmega2560" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   8 add   :  13 adiw  :   1 and   :   2 
andi  :   2 asr   :   1 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   0 break :   0 breq  :  78 brge  :   7 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   5 brlt  :   7 brmi  :   0 
brne  :   8 brpl  :   0 brsh  :   2 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :   0 cbi   :   5 cbr   :   0 
clc   :   0 clh   :   0 cli   :   1 cln   :   0 clr   :  45 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :  16 cpc   :   1 
cpi   :  87 cpse  :   0 dec   :   2 eicall:   0 eijmp :   0 elpm  :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   3 inc   :  29 jmp   :  89 ld    :   7 ldd   :   0 ldi   : 496 
lds   :  58 lpm   :   0 lsl   :   2 lsr   :   0 mov   :  57 movw  :   0 
mul   :   7 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   0 
ori   :   4 out   :  20 pop   :  82 push  :  83 rcall : 984 ret   :  79 
reti  :   6 rjmp  :   8 rol   :   1 ror   :   0 sbc   :   0 sbci  :   1 
sbi   :   5 sbic  :   0 sbis  :   0 sbiw  :   1 sbr   :   0 sbrc  :   1 
sbrs  :   0 sec   :   1 seh   :   0 sei   :   2 sen   :   0 ser   :   6 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :   7 std   :   0 sts   :  72 sub   :   4 subi  :  25 swap  :   0 
tst   :   0 wdr   :   0 
Instructions used: 48 out of 116 (41.4%)

"ATmega2560" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x001508   5300      0   5300  262144   2.0%
[.dseg] 0x000200 0x000281      0    129    129    8192   1.6%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 0 warnings
